[
    {
        "id": "b79a946966637772",
        "type": "tab",
        "label": "REST-server",
        "disabled": false,
        "info": "",
        "env": [
            {
                "name": "version",
                "value": "0.0.1",
                "type": "str"
            }
        ]
    },
    {
        "id": "d5b708b9aa215a10",
        "type": "tab",
        "label": "common",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "99e74a7c62587047",
        "type": "subflow",
        "name": "calculate(Sub)CriteriaPoints",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "809f072675aa7ae8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 510,
                "y": 80,
                "wires": [
                    {
                        "id": "809f072675aa7ae8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#D8BFD8",
        "inputLabels": [
            "msg"
        ],
        "outputLabels": [
            "msg"
        ]
    },
    {
        "id": "36dc69b49ec5d9e3",
        "type": "subflow",
        "name": "calculateAggregatedCriteriaPoints",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "c771e118e2f5b038"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 590,
                "y": 80,
                "wires": [
                    {
                        "id": "c771e118e2f5b038",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "inputLabels": [
            "msg"
        ],
        "outputLabels": [
            "msg"
        ]
    },
    {
        "id": "a84c5aee3cad0e1d",
        "type": "subflow",
        "name": "calculateCategoryPoints",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "8cc0a2b8191cee18"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 550,
                "y": 80,
                "wires": [
                    {
                        "id": "8cc0a2b8191cee18",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "inputLabels": [
            "msg"
        ],
        "outputLabels": [
            "msg"
        ]
    },
    {
        "id": "bea78bc3996d3b78",
        "type": "group",
        "z": "b79a946966637772",
        "name": "REST API Request/Response",
        "style": {
            "label": true
        },
        "nodes": [
            "5eaecf71af59a450",
            "755ba42d257ee185",
            "d86f6297fe2e2362",
            "1aea680b0b9c6684",
            "542db1030e144e78",
            "3044e6dd8f5cb2a1",
            "85c8a41745bce43f",
            "11ac424b8c510a53",
            "520b800272c0658f",
            "5f66ae1a2cf8dbaf",
            "13d7dba2f124c9c1",
            "e9fe916615269ced",
            "7127a0f0abaa8112",
            "8a53d6ee984076cd"
        ],
        "x": 54,
        "y": 39,
        "w": 1692,
        "h": 302
    },
    {
        "id": "809f072675aa7ae8",
        "type": "function",
        "z": "99e74a7c62587047",
        "name": "calculate(Sub)CriteriaPoints",
        "func": "const judgeCriteria = msg.payload.judgeCriteria;\n\nObject.values(judgeCriteria).forEach(criteria => {\n    criteria.judges\n        .forEach((judge) => {\n            let calculatedCriteriaPoints = 0\n            Object.values(judge.subCriteriaPoints).forEach((subCriteria) => {\n                const name = subCriteria.subCriteriaName\n                const weight = subCriteria.subCriteriaWeight\n                const points = subCriteria.value * parseFloat(weight) / 100\n                calculatedCriteriaPoints += points\n                subCriteria.calculatedPoints = points\n            })\n            judge.calculatedCriteriaPoints = calculatedCriteriaPoints\n        })\n})\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "c771e118e2f5b038",
        "type": "function",
        "z": "36dc69b49ec5d9e3",
        "name": "calculateAggregatedCriteriaPoints",
        "func": "const judgeCriteria = msg.payload.judgeCriteria\n\nObject.values(judgeCriteria).forEach(criteria  => {\n    const aggregationMethod = criteria.criteriaName === 'speed' ? 'bandwidth' : 'average'\n    const calculatedCriteriaPoints = criteria.judges\n        .map(judge => judge.calculatedCriteriaPoints)\n        .filter(point => point !== undefined && point !== null)\n\n    const sortedCalculatedCriteriaPoints = [...calculatedCriteriaPoints || []].sort((a, b) => a - b)\n    const elements = sortedCalculatedCriteriaPoints.length\n\n    const stats = {}\n    stats.hint = 'average'\n    stats.sortedValues = sortedCalculatedCriteriaPoints\n    stats.min = sortedCalculatedCriteriaPoints[0]\n    stats.max = sortedCalculatedCriteriaPoints[elements - 1]\n    stats.diff = Math.abs(stats.max - stats.min)\n    stats.avg = sortedCalculatedCriteriaPoints.reduce((memo, value) => memo += value, 0) / elements\n\n    criteria.calculatedAggregatedCriteriaStats = stats\n    criteria.calculatedAggregationMethod = aggregationMethod\n\n\n    if (aggregationMethod === 'average') {\n        criteria.calculatedAggregatedCriteriaPoints = stats.avg\n    } else if (aggregationMethod === 'bandwidth') {\n        if (elements < 3) {\n            if (stats.diff > 5) {\n                stats.hint = 'error'\n                stats.error = `points bandwidth is too high: ${JSON.stringify(stats.sortedValues)}, diff: ${stats.diff}`\n                criteria.calculatedAggregatedCriteriaPoints = null\n            } else {\n                stats.hint = 'lessThan3Results'\n                criteria.calculatedAggregatedCriteriaPoints = stats.avg\n            }\n        } else if (stats.diff === 0) {\n            stats.hint = 'allEqual'\n            criteria.calculatedAggregatedCriteriaPoints = stats.avg\n        } else if (sortedCalculatedCriteriaPoints[0] === sortedCalculatedCriteriaPoints[1]) {\n            stats.hint = '2Equal'\n            criteria.calculatedAggregatedCriteriaPoints = sortedCalculatedCriteriaPoints[0]\n        } else if (sortedCalculatedCriteriaPoints[0] === sortedCalculatedCriteriaPoints[2]) {\n            stats.hint = '2Equal'\n            criteria.calculatedAggregatedCriteriaPoints = sortedCalculatedCriteriaPoints[0]\n        } else if (sortedCalculatedCriteriaPoints[1] === sortedCalculatedCriteriaPoints[2]) {\n            stats.hint = '2Equal'\n            criteria.calculatedAggregatedCriteriaPoints = sortedCalculatedCriteriaPoints[1]\n        } else {\n            const d1 = Math.abs(sortedCalculatedCriteriaPoints[0] - sortedCalculatedCriteriaPoints[1])\n            const d2 = Math.abs(sortedCalculatedCriteriaPoints[1] - sortedCalculatedCriteriaPoints[2])\n            if (d1 <= 5 && d2 <= 5) {\n                stats.hint = 'withinBandwidth'\n                criteria.calculatedAggregatedCriteriaPoints = stats.avg\n            } else if (d1 > 5 && d2 > 5) {\n                stats.hint = 'error'\n                stats.error = `points bandwidth is too high: ${JSON.stringify(stats.sortedValues)}, d1: ${d1}, d2: ${d2}`\n                criteria.calculatedAggregatedCriteriaPoints = null\n            } else if (d1 > 5) {\n                stats.hint = 'd1>5'\n                criteria.calculatedAggregatedCriteriaPoints = (sortedCalculatedCriteriaPoints[1] + sortedCalculatedCriteriaPoints[2]) / 2\n            } else if (d2 > 5) {\n                stats.hint = 'd2>5'\n                criteria.calculatedAggregatedCriteriaPoints = (sortedCalculatedCriteriaPoints[0] + sortedCalculatedCriteriaPoints[1]) / 2\n            } else {\n                stats.hint = 'error'\n                stats.error = `unknown case for values: ${JSON.stringify(stats.sortedValues)}`\n                criteria.calculatedAggregatedCriteriaPoints = null\n            }\n        }\n    } else {\n        stats.hint = 'error'\n        stats.error = `aggregationMethod: ${aggregationMethod} unknown`\n        criteria.calculatedAggregatedCriteriaPoints = null\n    }\n\n    criteria.calculatedAggregatedCriteriaPointsRaw = criteria.calculatedAggregatedCriteriaPoints\n    criteria.calculatedAggregatedCriteriaPoints = criteria.criteriaName === 'speed' ? Math.ceil(criteria.calculatedAggregatedCriteriaPoints) : Number(criteria.calculatedAggregatedCriteriaPoints.toFixed(1))\n})\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "8cc0a2b8191cee18",
        "type": "function",
        "z": "a84c5aee3cad0e1d",
        "name": "calculateCategoryPoints",
        "func": "const category = msg.payload;\nconst stats = {}\n\ncategory.calculatedCategoryPoints = Object.values(category.judgeCriteria).reduce((memo, criteria) => {\n    const weight = criteria.criteriaWeight\n    const points = (criteria.calculatedAggregatedCriteriaPoints || 0) * weight / 100\n    stats[criteria.criteriaName] = points\n    return memo + points\n}, 0)\ncategory.calculatedCategoryPoints = Number(category.calculatedCategoryPoints.toFixed(1))\n\ncategory.calculatedCategoryStats = stats\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "5eaecf71af59a450",
        "type": "http response",
        "z": "b79a946966637772",
        "g": "bea78bc3996d3b78",
        "name": "statuscode-ok",
        "statusCode": "200",
        "headers": {},
        "x": 1580,
        "y": 200,
        "wires": []
    },
    {
        "id": "755ba42d257ee185",
        "type": "http in",
        "z": "b79a946966637772",
        "g": "bea78bc3996d3b78",
        "name": "/engine/calculations/points",
        "url": "/engine/calculations/points",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "d86f6297fe2e2362",
                "1aea680b0b9c6684",
                "13d7dba2f124c9c1"
            ]
        ]
    },
    {
        "id": "d86f6297fe2e2362",
        "type": "debug",
        "z": "b79a946966637772",
        "g": "bea78bc3996d3b78",
        "name": "debug-request-payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 240,
        "wires": []
    },
    {
        "id": "1aea680b0b9c6684",
        "type": "change",
        "z": "b79a946966637772",
        "g": "bea78bc3996d3b78",
        "name": "set-request-target",
        "rules": [
            {
                "t": "set",
                "p": "request",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "msg",
                "to": "common",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 120,
        "wires": [
            [
                "85c8a41745bce43f"
            ]
        ]
    },
    {
        "id": "542db1030e144e78",
        "type": "switch",
        "z": "b79a946966637772",
        "g": "bea78bc3996d3b78",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "error",
                "vt": "msg"
            },
            {
                "t": "jsonata_exp",
                "v": "$exists([msg.payload.code=\"OK\"])\t",
                "vt": "jsonata"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1190,
        "y": 120,
        "wires": [
            [
                "7127a0f0abaa8112"
            ],
            [
                "5eaecf71af59a450"
            ]
        ]
    },
    {
        "id": "3044e6dd8f5cb2a1",
        "type": "http response",
        "z": "b79a946966637772",
        "g": "bea78bc3996d3b78",
        "name": "statuscode-bad-request",
        "statusCode": "400",
        "headers": {},
        "x": 1610,
        "y": 80,
        "wires": []
    },
    {
        "id": "85c8a41745bce43f",
        "type": "link call",
        "z": "b79a946966637772",
        "g": "bea78bc3996d3b78",
        "name": "calculation-selector",
        "links": [],
        "linkType": "dynamic",
        "timeout": "3",
        "x": 750,
        "y": 120,
        "wires": [
            [
                "11ac424b8c510a53"
            ]
        ]
    },
    {
        "id": "11ac424b8c510a53",
        "type": "function",
        "z": "b79a946966637772",
        "g": "bea78bc3996d3b78",
        "name": "set-response",
        "func": "msg.payload = {\n    meta: {\n        version: env.version,\n        timestamp: Date.now(),\n        target: msg.target\n    },\n    ...msg.payload,\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 120,
        "wires": [
            [
                "542db1030e144e78",
                "520b800272c0658f"
            ]
        ]
    },
    {
        "id": "520b800272c0658f",
        "type": "debug",
        "z": "b79a946966637772",
        "g": "bea78bc3996d3b78",
        "name": "debug-response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 220,
        "wires": []
    },
    {
        "id": "5f66ae1a2cf8dbaf",
        "type": "catch",
        "z": "b79a946966637772",
        "g": "bea78bc3996d3b78",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 760,
        "y": 240,
        "wires": [
            [
                "11ac424b8c510a53"
            ]
        ]
    },
    {
        "id": "13d7dba2f124c9c1",
        "type": "debug",
        "z": "b79a946966637772",
        "g": "bea78bc3996d3b78",
        "name": "debug-request-header",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "req.headers",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 300,
        "wires": []
    },
    {
        "id": "e9fe916615269ced",
        "type": "debug",
        "z": "b79a946966637772",
        "g": "bea78bc3996d3b78",
        "name": "debug-error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 140,
        "wires": []
    },
    {
        "id": "7127a0f0abaa8112",
        "type": "function",
        "z": "b79a946966637772",
        "g": "bea78bc3996d3b78",
        "name": "set-response",
        "func": "msg.payload = {\n    error: msg.error,\n    meta: {\n        version: env.version,\n        time: Date.now(),\n        target: msg.target\n    },\n    inputs: msg.req.body\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 80,
        "wires": [
            [
                "3044e6dd8f5cb2a1",
                "e9fe916615269ced"
            ]
        ]
    },
    {
        "id": "8a53d6ee984076cd",
        "type": "change",
        "z": "b79a946966637772",
        "g": "bea78bc3996d3b78",
        "name": "set-request-target",
        "rules": [
            {
                "t": "set",
                "p": "request",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "msg",
                "to": "payload.judgingRuleName",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "660a082c2b8d5fe6",
        "type": "link in",
        "z": "d5b708b9aa215a10",
        "name": "common",
        "links": [],
        "x": 35,
        "y": 80,
        "wires": [
            [
                "79efcbceccb2657c"
            ]
        ]
    },
    {
        "id": "60a8cb787b6fbfc5",
        "type": "link out",
        "z": "d5b708b9aa215a10",
        "name": "link-out",
        "mode": "return",
        "links": [],
        "x": 485,
        "y": 240,
        "wires": []
    },
    {
        "id": "79efcbceccb2657c",
        "type": "subflow:99e74a7c62587047",
        "z": "d5b708b9aa215a10",
        "name": "calculate(Sub)CriteriaPoints",
        "x": 240,
        "y": 80,
        "wires": [
            [
                "ab11aef31dda8b4b"
            ]
        ]
    },
    {
        "id": "ab11aef31dda8b4b",
        "type": "subflow:36dc69b49ec5d9e3",
        "z": "d5b708b9aa215a10",
        "name": "",
        "env": [
            {
                "name": "criteriaName",
                "value": "speed",
                "type": "str"
            },
            {
                "name": "aggregationMethod",
                "value": "bandwidth",
                "type": "str"
            }
        ],
        "x": 260,
        "y": 160,
        "wires": [
            [
                "333af43deeee0642"
            ]
        ],
        "info": "# calculateAggregatedCriteriaPoints\n\ncalculates the aggregated criteria points for a given criteria with the given aggregationMethod.\n\n## parameters\n\n### criteriaName (string)\n\n### aggregationMethod (string)\n\nvalid `aggregationMethod` are: `(average|bandwith)`\n"
    },
    {
        "id": "333af43deeee0642",
        "type": "subflow:a84c5aee3cad0e1d",
        "z": "d5b708b9aa215a10",
        "name": "",
        "x": 250,
        "y": 240,
        "wires": [
            [
                "60a8cb787b6fbfc5"
            ]
        ]
    }
]