{
	"info": {
		"_postman_id": "79aa1002-fedb-4364-8210-d35756f13746",
		"name": "competition-tests-single_Beg&Interm",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9273620"
	},
	"item": [
		{
			"name": "Speed 30s Bü15 A",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-beginner-speed-30sSingleRope-AthleteA",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-beginner-speed-30sSingleRope-AthleteA"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Judge1\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 53\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Judge2\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 59\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Judge3\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 52\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(53)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 30s Bü15 B",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-beginner-speed-30sSingleRope-AthleteB",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-beginner-speed-30sSingleRope-AthleteB"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Judge4\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 60\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Judge5\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 60\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J6\",\n    \"judgeName\": \"Judge6\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 60\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(60)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 30s Bü15 C",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-beginner-speed-30sSingleRope-AthleteC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-beginner-speed-30sSingleRope-AthleteC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J7\",\n    \"judgeName\": \"Judge7\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 42\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J8\",\n    \"judgeName\": \"Judge8\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 41\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J9\",\n    \"judgeName\": \"Judge9\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 42\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(42)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 30s Bü15 D",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-beginner-speed-30sSingleRope-AthleteD",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-beginner-speed-30sSingleRope-AthleteD"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Judge12\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 28\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(28)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 30s Bü15 E",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-beginner-speed-30sSingleRope-AthleteE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-beginner-speed-30sSingleRope-AthleteE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J13",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J13\",\n    \"judgeName\": \"Judge13\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 55\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J14",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J14\",\n    \"judgeName\": \"Judge14\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 56\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J15",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J15\",\n    \"judgeName\": \"Judge15\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 57\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(56)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 60s Bü15 A",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-beginner-speed-60sSingleRope-AthleteA",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-beginner-speed-60sSingleRope-AthleteA"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J16",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J16\",\n    \"judgeName\": \"Judge16\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 65\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J17",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J17\",\n    \"judgeName\": \"Judge17\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 67\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J18",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J18\",\n    \"judgeName\": \"Judge18\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 64\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(61)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 60s Bü15 B",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-beginner-speed-60sSingleRope-AthleteB",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-beginner-speed-60sSingleRope-AthleteB"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J19",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J19\",\n    \"judgeName\": \"Judge19\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 90\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J20",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J20\",\n    \"judgeName\": \"Judge20\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 95\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J21",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J21\",\n    \"judgeName\": \"Judge21\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 93\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(93)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 60s Bü15 C",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-beginner-speed-60sSingleRope-AthleteC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-beginner-speed-60sSingleRope-AthleteC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J22",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J22\",\n    \"judgeName\": \"Judge22\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 110\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J23",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J23\",\n    \"judgeName\": \"Judge23\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 111\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J24",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J24\",\n    \"judgeName\": \"Judge24\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 111\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(111)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 60s Bü15 D",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-beginner-speed-60sSingleRope-AthleteD",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-beginner-speed-60sSingleRope-AthleteD"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Judge1\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 66\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Judge2\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 65\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Judge3\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 68\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(67)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 60s Bü15 E",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-beginner-speed-60sSingleRope-AthleteE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-beginner-speed-60sSingleRope-AthleteE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Judge4\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 90\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Judge5\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 91\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J6\",\n    \"judgeName\": \"Judge6\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 92\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(91)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed CC Bü15 B",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-beginner-speed-30sCrissCross-AthleteB",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-beginner-speed-30sCrissCross-AthleteB"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J10\",\n    \"judgeName\": \"Judge10\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 40\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J11\",\n    \"judgeName\": \"Judge11\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 39\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Judge12\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 42\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(41)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed CC Bü15 C",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-beginner-speed-30sCrissCross-AthleteC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-beginner-speed-30sCrissCross-AthleteC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J13",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J13\",\n    \"judgeName\": \"Judge13\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 58\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J14",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J14\",\n    \"judgeName\": \"Judge14\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 56\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J15",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J15\",\n    \"judgeName\": \"Judge15\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 51\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(55)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed CC Bü15 D",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-beginner-speed-30sCrissCross-AthleteD",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-beginner-speed-30sCrissCross-AthleteD"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J16",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J16\",\n    \"judgeName\": \"Judge16\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 26\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J17",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J17\",\n    \"judgeName\": \"Judge17\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 27\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J18",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J18\",\n    \"judgeName\": \"Judge18\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 27\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(27)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed CC Bü15 E",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-beginner-speed-30sCrissCross-AthleteE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-beginner-speed-30sCrissCross-AthleteE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J19",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J19\",\n    \"judgeName\": \"Judge19\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 33\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J20",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J20\",\n    \"judgeName\": \"Judge20\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 32\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J21",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J21\",\n    \"judgeName\": \"Judge21\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 32\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(29)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Compulsory Bü15 A",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-beginner-compulsory-compulsory-AthleteA",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-beginner-compulsory-compulsory-AthleteA"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"Judge1\",\n    \"judgeName\": \"Judge1\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000010\",\n    \"subCriteriaPoints\": {\n        \"maximumPoints\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 20,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"maximumPoints\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Maximale Punkte\",\n            \"value\": 20\n        },\n        \"sequenceDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"sequenceDeduction\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Sprungfolge\",\n            \"value\": 6\n        },\n        \"executionDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 25,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"executionDeduction\",\n            \"subCriteriaWeight\": -40,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 9\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"Judge2\",\n    \"judgeName\": \"Judge2\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000010\",\n    \"subCriteriaPoints\": {\n        \"maximumPoints\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 20,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"maximumPoints\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Maximale Punkte\",\n            \"value\": 20\n        },\n        \"sequenceDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"sequenceDeduction\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Sprungfolge\",\n            \"value\": 6\n        },\n        \"executionDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 25,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"executionDeduction\",\n            \"subCriteriaWeight\": -40,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 8\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"Judge3\",\n    \"judgeName\": \"Judge3\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000010\",\n    \"subCriteriaPoints\": {\n        \"maximumPoints\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 20,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"maximumPoints\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Maximale Punkte\",\n            \"value\": 20\n        },\n        \"sequenceDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"sequenceDeduction\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Sprungfolge\",\n            \"value\": 6\n        },\n        \"executionDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 25,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"executionDeduction\",\n            \"subCriteriaWeight\": -40,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 10\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(13.4)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Compulsory Bü15 B",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-beginner-compulsory-compulsory-AthleteB",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-beginner-compulsory-compulsory-AthleteB"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"Judge4\",\n    \"judgeName\": \"Judge4\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000010\",\n    \"subCriteriaPoints\": {\n        \"maximumPoints\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 20,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"maximumPoints\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Maximale Punkte\",\n            \"value\": 20\n        },\n        \"sequenceDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"sequenceDeduction\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Sprungfolge\",\n            \"value\": 3\n        },\n        \"executionDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 25,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"executionDeduction\",\n            \"subCriteriaWeight\": -40,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 4\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"Judge5\",\n    \"judgeName\": \"Judge5\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000010\",\n    \"subCriteriaPoints\": {\n        \"maximumPoints\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 20,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"maximumPoints\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Maximale Punkte\",\n            \"value\": 20\n        },\n        \"sequenceDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"sequenceDeduction\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Sprungfolge\",\n            \"value\": 3\n        },\n        \"executionDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 25,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"executionDeduction\",\n            \"subCriteriaWeight\": -40,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(17.3)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Compulsory Bü15 C",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-beginner-compulsory-compulsory-AthleteC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-beginner-compulsory-compulsory-AthleteC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"Judge7\",\n    \"judgeName\": \"Judge7\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000010\",\n    \"subCriteriaPoints\": {\n        \"maximumPoints\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 20,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"maximumPoints\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Maximale Punkte\",\n            \"value\": 20\n        },\n        \"sequenceDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"sequenceDeduction\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Sprungfolge\",\n            \"value\": 3\n        },\n        \"executionDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 25,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"executionDeduction\",\n            \"subCriteriaWeight\": -40,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"Judge8\",\n    \"judgeName\": \"Judge8\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000010\",\n    \"subCriteriaPoints\": {\n        \"maximumPoints\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 20,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"maximumPoints\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Maximale Punkte\",\n            \"value\": 20\n        },\n        \"sequenceDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"sequenceDeduction\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Sprungfolge\",\n            \"value\": 3\n        },\n        \"executionDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 25,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"executionDeduction\",\n            \"subCriteriaWeight\": -40,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"Judge9\",\n    \"judgeName\": \"Judge9\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000010\",\n    \"subCriteriaPoints\": {\n        \"maximumPoints\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 20,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"maximumPoints\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Maximale Punkte\",\n            \"value\": 20\n        },\n        \"sequenceDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"sequenceDeduction\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Sprungfolge\",\n            \"value\": 3\n        },\n        \"executionDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 25,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"executionDeduction\",\n            \"subCriteriaWeight\": -40,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 5\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(17.3)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Compulsory Bü15 D",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-beginner-compulsory-compulsory-AthleteD",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-beginner-compulsory-compulsory-AthleteD"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"Judge10\",\n    \"judgeName\": \"Judge10\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000010\",\n    \"subCriteriaPoints\": {\n        \"maximumPoints\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 20,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"maximumPoints\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Maximale Punkte\",\n            \"value\": 20\n        },\n        \"sequenceDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"sequenceDeduction\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Sprungfolge\",\n            \"value\": 15\n        },\n        \"executionDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 25,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"executionDeduction\",\n            \"subCriteriaWeight\": -40,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 12\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"Judge11\",\n    \"judgeName\": \"Judge11\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000010\",\n    \"subCriteriaPoints\": {\n        \"maximumPoints\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 20,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"maximumPoints\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Maximale Punkte\",\n            \"value\": 20\n        },\n        \"sequenceDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"sequenceDeduction\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Sprungfolge\",\n            \"value\": 15\n        },\n        \"executionDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 25,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"executionDeduction\",\n            \"subCriteriaWeight\": -40,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 12\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"Judge12\",\n    \"judgeName\": \"Judge12\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000010\",\n    \"subCriteriaPoints\": {\n        \"maximumPoints\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 20,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"maximumPoints\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Maximale Punkte\",\n            \"value\": 20\n        },\n        \"sequenceDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"sequenceDeduction\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Sprungfolge\",\n            \"value\": 15\n        },\n        \"executionDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 25,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"executionDeduction\",\n            \"subCriteriaWeight\": -40,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 12\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(7.7)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Compulsory Bü15 E",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-beginner-compulsory-compulsory-AthleteE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-beginner-compulsory-compulsory-AthleteE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J13",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"Judge13\",\n    \"judgeName\": \"Judge13\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000010\",\n    \"subCriteriaPoints\": {\n        \"maximumPoints\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 20,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"maximumPoints\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Maximale Punkte\",\n            \"value\": 20\n        },\n        \"sequenceDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"sequenceDeduction\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Sprungfolge\",\n            \"value\": 0\n        },\n        \"executionDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 25,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"executionDeduction\",\n            \"subCriteriaWeight\": -40,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J14",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"Judge14\",\n    \"judgeName\": \"Judge14\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000010\",\n    \"subCriteriaPoints\": {\n        \"maximumPoints\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 20,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"maximumPoints\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Maximale Punkte\",\n            \"value\": 20\n        },\n        \"sequenceDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"sequenceDeduction\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Sprungfolge\",\n            \"value\": 0\n        },\n        \"executionDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 25,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"executionDeduction\",\n            \"subCriteriaWeight\": -40,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J15",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"Judge15\",\n    \"judgeName\": \"Judge15\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000010\",\n    \"subCriteriaPoints\": {\n        \"maximumPoints\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 20,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"maximumPoints\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Maximale Punkte\",\n            \"value\": 20\n        },\n        \"sequenceDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"sequenceDeduction\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Sprungfolge\",\n            \"value\": 0\n        },\n        \"executionDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 25,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"executionDeduction\",\n            \"subCriteriaWeight\": -40,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(19.5)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 30s Iü15 G",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-intermediate-speed-30sSingleRope-AthleteG",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-intermediate-speed-30sSingleRope-AthleteG"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J16",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J16\",\n    \"judgeName\": \"Judge16\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 60\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J17",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J17\",\n    \"judgeName\": \"Judge17\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 61\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J18",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J18\",\n    \"judgeName\": \"Judge18\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 55\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(59)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 30s Iü15 H",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-intermediate-speed-30sSingleRope-AthleteH",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-intermediate-speed-30sSingleRope-AthleteH"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J19",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J19\",\n    \"judgeName\": \"Judge19\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 64\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J20",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J20\",\n    \"judgeName\": \"Judge20\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 64\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J21",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J21\",\n    \"judgeName\": \"Judge21\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 64\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(64)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 30s Iü15 I",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-intermediate-speed-30sSingleRope-AthleteI",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-intermediate-speed-30sSingleRope-AthleteI"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J22",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J22\",\n    \"judgeName\": \"Judge22\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 65\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J23",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J23\",\n    \"judgeName\": \"Judge23\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 64\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J24",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J24\",\n    \"judgeName\": \"Judge24\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 63\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(64)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 30s Iü15 J",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-intermediate-speed-30sSingleRope-AthleteJ",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-intermediate-speed-30sSingleRope-AthleteJ"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Judge1\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 45\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Judge2\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 50\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Judge3\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 55\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(50)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 30s Iü15 K",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-intermediate-speed-30sSingleRope-AthleteK",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-intermediate-speed-30sSingleRope-AthleteK"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Judge4\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 60\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Judge5\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 65\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J6\",\n    \"judgeName\": \"Judge6\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 71\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(63)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 60s Iü15 G",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-intermediate-speed-60sSingleRope-AthleteG",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-intermediate-speed-60sSingleRope-AthleteG"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J7\",\n    \"judgeName\": \"Judge7\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 121\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J8\",\n    \"judgeName\": \"Judge8\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 121\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J9\",\n    \"judgeName\": \"Judge9\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 121\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(121)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 60s Iü15 H",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-intermediate-speed-60sSingleRope-AthleteH",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-intermediate-speed-60sSingleRope-AthleteH"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J10\",\n    \"judgeName\": \"Judge10\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 119\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J11\",\n    \"judgeName\": \"Judge11\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 118\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Judge12\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 119\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(119)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 60s Iü15 I",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-intermediate-speed-60sSingleRope-AthleteI",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-intermediate-speed-60sSingleRope-AthleteI"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J13",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J13\",\n    \"judgeName\": \"Judge13\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 125\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J14",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J14\",\n    \"judgeName\": \"Judge14\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 125\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J15",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J15\",\n    \"judgeName\": \"Judge15\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 125\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(125)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 60s Iü15 J",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-intermediate-speed-60sSingleRope-AthleteJ",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-intermediate-speed-60sSingleRope-AthleteJ"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J16",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J16\",\n    \"judgeName\": \"Judge16\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 101\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J17",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J17\",\n    \"judgeName\": \"Judge17\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 102\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J18",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J18\",\n    \"judgeName\": \"Judge18\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 103\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(102)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 60s Iü15 K",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-intermediate-speed-60sSingleRope-AthleteK",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-intermediate-speed-60sSingleRope-AthleteK"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J19",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J19\",\n    \"judgeName\": \"Judge19\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 129\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J20",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J20\",\n    \"judgeName\": \"Judge20\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 128\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J21",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J21\",\n    \"judgeName\": \"Judge21\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 126\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(128)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed CC Iü15 G",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-intermediate-speed-30sCrissCross-AthleteG",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-intermediate-speed-30sCrissCross-AthleteG"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J22",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J22\",\n    \"judgeName\": \"Judge22\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 45\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J23",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J23\",\n    \"judgeName\": \"Judge23\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 44\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J24",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J24\",\n    \"judgeName\": \"Judge24\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 44\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(44)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed CC Iü15 H",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-intermediate-speed-30sCrissCross-AthleteH",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-intermediate-speed-30sCrissCross-AthleteH"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Judge1\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 39\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Judge2\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 37\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Judge3\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 36\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(38)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed CC Iü15 I",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-intermediate-speed-30sCrissCross-AthleteI",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-intermediate-speed-30sCrissCross-AthleteI"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Judge4\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 55\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J6\",\n    \"judgeName\": \"Judge6\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 55\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(55)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed CC Iü15 J",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-intermediate-speed-30sCrissCross-AthleteJ",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-intermediate-speed-30sCrissCross-AthleteJ"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J7\",\n    \"judgeName\": \"Judge7\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 55\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J8\",\n    \"judgeName\": \"Judge8\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 55\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J9\",\n    \"judgeName\": \"Judge9\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 55\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(50)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed CC Iü15 K",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-intermediate-speed-30sCrissCross-AthleteK",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-intermediate-speed-30sCrissCross-AthleteK"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J10\",\n    \"judgeName\": \"Judge19\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 55\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J11\",\n    \"judgeName\": \"Judge11\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 54\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Judge12\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 55\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(55)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Compulsory I15 G",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-intermediate-compulsory-compulsory-AthleteG",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-intermediate-compulsory-compulsory-AthleteG"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J18",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"Judge18\",\n    \"judgeName\": \"Judge18\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000009\",\n    \"subCriteriaPoints\": {\n        \"maximumPoints\": {\n            \"step\": 1,\n            \"rangeEnd\": 58,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 58,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"maximumPoints\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Maximale Punkte\",\n            \"value\": 58\n        },\n        \"excecutionDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 30,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"excecutionDeduction\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Ausführung (/)\",\n            \"value\": 6\n        },\n        \"mistake\": {\n            \"step\": 1,\n            \"rangeEnd\": 14,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"mistake\",\n            \"subCriteriaWeight\": -200,\n            \"subCriteriaDescription\": \"Hänger (O) inkl. Musik\",\n            \"value\": 2\n        },\n        \"rhythmDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 14,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"rhythmDeduction\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Musik\",\n            \"value\": 0\n        },\n            \"bonus\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"bonus\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Push-Up Bonus\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(48)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Compulsory I15 H",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-intermediate-compulsory-compulsory-AthleteH",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-intermediate-compulsory-compulsory-AthleteH"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J19",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"Judge19\",\n    \"judgeName\": \"Judge19\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000009\",\n    \"subCriteriaPoints\": {\n        \"maximumPoints\": {\n            \"step\": 1,\n            \"rangeEnd\": 58,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 58,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"maximumPoints\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Maximale Punkte\",\n            \"value\": 58\n        },\n        \"excecutionDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 30,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"excecutionDeduction\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Ausführung (/)\",\n            \"value\": 14\n        },\n        \"mistake\": {\n            \"step\": 1,\n            \"rangeEnd\": 14,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"mistake\",\n            \"subCriteriaWeight\": -200,\n            \"subCriteriaDescription\": \"Hänger (O) inkl. Musik\",\n            \"value\": 3\n        },\n        \"rhythmDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 14,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"rhythmDeduction\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Musik\",\n            \"value\": 3\n        },\n            \"bonus\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"bonus\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Push-Up Bonus\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J20",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"Judge20\",\n    \"judgeName\": \"Judge20\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000009\",\n    \"subCriteriaPoints\": {\n        \"maximumPoints\": {\n            \"step\": 1,\n            \"rangeEnd\": 58,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 58,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"maximumPoints\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Maximale Punkte\",\n            \"value\": 58\n        },\n        \"excecutionDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 30,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"excecutionDeduction\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Ausführung (/)\",\n            \"value\": 14\n        },\n        \"mistake\": {\n            \"step\": 1,\n            \"rangeEnd\": 14,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"mistake\",\n            \"subCriteriaWeight\": -200,\n            \"subCriteriaDescription\": \"Hänger (O) inkl. Musik\",\n            \"value\": 3\n        },\n        \"rhythmDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 14,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"rhythmDeduction\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Musik\",\n            \"value\": 3\n        },\n            \"bonus\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"bonus\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Push-Up Bonus\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J21",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"Judge21\",\n    \"judgeName\": \"Judge21\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000009\",\n    \"subCriteriaPoints\": {\n        \"maximumPoints\": {\n            \"step\": 1,\n            \"rangeEnd\": 58,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 58,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"maximumPoints\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Maximale Punkte\",\n            \"value\": 58\n        },\n        \"excecutionDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 30,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"excecutionDeduction\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Ausführung (/)\",\n            \"value\": 13\n        },\n        \"mistake\": {\n            \"step\": 1,\n            \"rangeEnd\": 14,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"mistake\",\n            \"subCriteriaWeight\": -200,\n            \"subCriteriaDescription\": \"Hänger (O) inkl. Musik\",\n            \"value\": 3\n        },\n        \"rhythmDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 14,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"rhythmDeduction\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Musik\",\n            \"value\": 3\n        },\n            \"bonus\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"bonus\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Push-Up Bonus\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(36.3)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Compulsory I15 I",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-intermediate-compulsory-compulsory-AthleteI",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-intermediate-compulsory-compulsory-AthleteI"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J22",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"Judge22\",\n    \"judgeName\": \"Judge22\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000009\",\n    \"subCriteriaPoints\": {\n        \"maximumPoints\": {\n            \"step\": 1,\n            \"rangeEnd\": 58,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 58,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"maximumPoints\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Maximale Punkte\",\n            \"value\": 58\n        },\n        \"excecutionDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 30,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"excecutionDeduction\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Ausführung (/)\",\n            \"value\": 9\n        },\n        \"mistake\": {\n            \"step\": 1,\n            \"rangeEnd\": 14,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"mistake\",\n            \"subCriteriaWeight\": -200,\n            \"subCriteriaDescription\": \"Hänger (O) inkl. Musik\",\n            \"value\": 2\n        },\n        \"rhythmDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 14,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"rhythmDeduction\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Musik\",\n            \"value\": 0\n        },\n            \"bonus\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"bonus\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Push-Up Bonus\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J23",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"Judge23\",\n    \"judgeName\": \"Judge23\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000009\",\n    \"subCriteriaPoints\": {\n        \"maximumPoints\": {\n            \"step\": 1,\n            \"rangeEnd\": 58,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 58,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"maximumPoints\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Maximale Punkte\",\n            \"value\": 58\n        },\n        \"excecutionDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 30,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"excecutionDeduction\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Ausführung (/)\",\n            \"value\": 8\n        },\n        \"mistake\": {\n            \"step\": 1,\n            \"rangeEnd\": 14,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"mistake\",\n            \"subCriteriaWeight\": -200,\n            \"subCriteriaDescription\": \"Hänger (O) inkl. Musik\",\n            \"value\": 2\n        },\n        \"rhythmDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 14,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"rhythmDeduction\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Musik\",\n            \"value\": 0\n        },\n            \"bonus\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"bonus\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Push-Up Bonus\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J24",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"Judge24\",\n    \"judgeName\": \"Judge24\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000009\",\n    \"subCriteriaPoints\": {\n        \"maximumPoints\": {\n            \"step\": 1,\n            \"rangeEnd\": 58,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 58,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"maximumPoints\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Maximale Punkte\",\n            \"value\": 58\n        },\n        \"excecutionDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 30,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"excecutionDeduction\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Ausführung (/)\",\n            \"value\": 4\n        },\n        \"mistake\": {\n            \"step\": 1,\n            \"rangeEnd\": 14,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"mistake\",\n            \"subCriteriaWeight\": -200,\n            \"subCriteriaDescription\": \"Hänger (O) inkl. Musik\",\n            \"value\": 2\n        },\n        \"rhythmDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 14,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"rhythmDeduction\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Musik\",\n            \"value\": 1\n        },\n            \"bonus\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"bonus\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Push-Up Bonus\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(46.7)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Compulsory I15 K",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-intermediate-compulsory-compulsory-AthleteK",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-intermediate-compulsory-compulsory-AthleteK"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"Judge4\",\n    \"judgeName\": \"Judge4\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000009\",\n    \"subCriteriaPoints\": {\n        \"maximumPoints\": {\n            \"step\": 1,\n            \"rangeEnd\": 58,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 58,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"maximumPoints\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Maximale Punkte\",\n            \"value\": 58\n        },\n        \"excecutionDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 30,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"excecutionDeduction\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Ausführung (/)\",\n            \"value\": 0\n        },\n        \"mistake\": {\n            \"step\": 1,\n            \"rangeEnd\": 14,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"mistake\",\n            \"subCriteriaWeight\": -200,\n            \"subCriteriaDescription\": \"Hänger (O) inkl. Musik\",\n            \"value\": 0\n        },\n        \"rhythmDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 14,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"rhythmDeduction\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Musik\",\n            \"value\": 0\n        },\n            \"bonus\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"bonus\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Push-Up Bonus\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"Judge5\",\n    \"judgeName\": \"Judge5\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000009\",\n    \"subCriteriaPoints\": {\n        \"maximumPoints\": {\n            \"step\": 1,\n            \"rangeEnd\": 58,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 58,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"maximumPoints\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Maximale Punkte\",\n            \"value\": 58\n        },\n        \"excecutionDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 30,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"excecutionDeduction\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Ausführung (/)\",\n            \"value\": 0\n        },\n        \"mistake\": {\n            \"step\": 1,\n            \"rangeEnd\": 14,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"mistake\",\n            \"subCriteriaWeight\": -200,\n            \"subCriteriaDescription\": \"Hänger (O) inkl. Musik\",\n            \"value\": 0\n        },\n        \"rhythmDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 14,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"rhythmDeduction\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Musik\",\n            \"value\": 0\n        },\n            \"bonus\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"bonus\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Push-Up Bonus\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"Judge6\",\n    \"judgeName\": \"Judge6\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000009\",\n    \"subCriteriaPoints\": {\n        \"maximumPoints\": {\n            \"step\": 1,\n            \"rangeEnd\": 58,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 58,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"maximumPoints\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Maximale Punkte\",\n            \"value\": 58\n        },\n        \"excecutionDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 30,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"excecutionDeduction\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Ausführung (/)\",\n            \"value\": 0\n        },\n        \"mistake\": {\n            \"step\": 1,\n            \"rangeEnd\": 14,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"mistake\",\n            \"subCriteriaWeight\": -200,\n            \"subCriteriaDescription\": \"Hänger (O) inkl. Musik\",\n            \"value\": 0\n        },\n        \"rhythmDeduction\": {\n            \"step\": 1,\n            \"rangeEnd\": 14,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"rhythmDeduction\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Musik\",\n            \"value\": 0\n        },\n            \"bonus\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"bonus\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Push-Up Bonus\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(59)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check Ranks",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "calculateAllPoints",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "calculateAllCategoryRanks",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/category-ranks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"category-ranks"
							]
						}
					},
					"response": []
				},
				{
					"name": "calculateAllCombinationRanks",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/combination-ranks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"combination-ranks"
							]
						}
					},
					"response": []
				},
				{
					"name": "listCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categories should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    if (jsonData.length) {",
									"    pm.expect(jsonData[0].id).to.exist",
									"        pm.environment.set(\"categoryId\", jsonData[0].id);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "listWeightedCombinations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament athlete should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"combinationId\", jsonData[0].combinationId);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/combinations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"combinations"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllCategoryRankDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryRank should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(Object.keys(jsonData).length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/category-ranks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"category-ranks"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllCombinationRanks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"combinationRank should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(Object.keys(jsonData)).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/combination-ranks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"combination-ranks"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}