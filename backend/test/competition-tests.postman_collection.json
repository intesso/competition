{
	"info": {
		"_postman_id": "a0988513-c60e-439d-8caf-cab6ced64ccd",
		"name": "competition-tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9273620"
	},
	"item": [
		{
			"name": "Speed SR U15 A",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Team SM 2022",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Team SM 2022"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=team-u15-teamShow-speed-singleRopeRelay-The Celebrations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "team-u15-teamShow-speed-singleRopeRelay-The Celebrations"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J7\",\n    \"judgeName\": \"Sandra Haas\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 210\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J8\",\n    \"judgeName\": \"Melanie Peier\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 208\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J9\",\n    \"judgeName\": \"Ramona Schär\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 212\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(205)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed SR U15 B",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Team SM 2022",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Team SM 2022"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=team-u15-teamShow-speed-singleRopeRelay-MarioKart4Deluxe",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "team-u15-teamShow-speed-singleRopeRelay-MarioKart4Deluxe"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Adrian Wenger\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 262\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Mirjam Schlatter\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 262\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Carmela Meier\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 263\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(262)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed SR U15 C",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Team SM 2022",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Team SM 2022"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=team-u15-teamShow-speed-singleRopeRelay-Tohuwabohu",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "team-u15-teamShow-speed-singleRopeRelay-Tohuwabohu"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J10\",\n    \"judgeName\": \"Angelika Nobbe\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 290\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J11\",\n    \"judgeName\": \"Lena Münger\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 288\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Rahel Weber\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 282\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(289)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed DD U15 A",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Team SM 2022",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Team SM 2022"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=team-u15-teamShow-speed-doubleDutchRelay-The Celebrations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "team-u15-teamShow-speed-doubleDutchRelay-The Celebrations"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J10\",\n    \"judgeName\": \"Angelika Nobbe\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 190\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n     \"judgeId\": \"J11\",\n    \"judgeName\": \"Lena Münger\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 195\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Rahel Weber\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 193\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(193)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed DD U15 B",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Team SM 2022",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Team SM 2022"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=team-u15-teamShow-speed-doubleDutchRelay-MarioKart4Deluxe",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "team-u15-teamShow-speed-doubleDutchRelay-MarioKart4Deluxe"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Matthias Zedi\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 183\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Gina Eichenberger\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 189\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J6\",\n    \"judgeName\": \"Marcel Soland\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 195\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(0)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed DD U15 C",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Team SM 2022",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Team SM 2022"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=team-u15-teamShow-speed-doubleDutchRelay-Tohuwabohu",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "team-u15-teamShow-speed-doubleDutchRelay-Tohuwabohu"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Adrian Wenger\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 199\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Mirjam Schlatter\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 203\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Carmela Meier\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 200\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(201)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Show U15 A",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Team SM 2022",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Team SM 2022"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=team-u15-teamShow-teamShow-teamShow-The Celebrations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "team-u15-teamShow-teamShow-teamShow-The Celebrations"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1 -crea",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Jessica Lehmann\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000026\",\n    \"subCriteriaPoints\": {\n        \"transitions\": {\n            \"step\": 1,\n            \"rangeEnd\": 5,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"transitions\",\n            \"subCriteriaWeight\": 250,\n            \"subCriteriaDescription\": \"Fliessende Wechsel\",\n            \"value\": 3\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": 15,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 250,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 8\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 25,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n            \"value\": 70\n        },\n        \"changeOfFormations\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"changeOfFormations\",\n            \"subCriteriaWeight\": 250,\n            \"subCriteriaDescription\": \"Formationswechsel\",\n            \"value\": 5\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2 - crea",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Angelika Nobbe\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000026\",\n    \"subCriteriaPoints\": {\n        \"transitions\": {\n            \"step\": 1,\n            \"rangeEnd\": 5,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"transitions\",\n            \"subCriteriaWeight\": 250,\n            \"subCriteriaDescription\": \"Fliessende Wechsel\",\n            \"value\": 3\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": 15,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 250,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 7\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 25,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n            \"value\": 65\n        },\n        \"changeOfFormations\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"changeOfFormations\",\n            \"subCriteriaWeight\": 250,\n            \"subCriteriaDescription\": \"Formationswechsel\",\n            \"value\": 5\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3 -crea",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Lena Münger\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000026\",\n    \"subCriteriaPoints\": {\n        \"transitions\": {\n            \"step\": 1,\n            \"rangeEnd\": 5,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"transitions\",\n            \"subCriteriaWeight\": 250,\n            \"subCriteriaDescription\": \"Fliessende Wechsel\",\n            \"value\": 3\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": 15,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 250,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 7\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 25,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n            \"value\": 55\n        },\n        \"changeOfFormations\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"changeOfFormations\",\n            \"subCriteriaWeight\": 250,\n            \"subCriteriaDescription\": \"Formationswechsel\",\n            \"value\": 6\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4 -music",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Marina Schneider\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000025\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 33,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n            \"value\": 75\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 8\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5 -music",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Sandra Angst\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000025\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 33,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n            \"value\": 70\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 9\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6 -music",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J6\",\n    \"judgeName\": \"Gina Eichenberger\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000025\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 33,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n            \"value\": 70\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 10\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J7\",\n    \"judgeName\": \"Sandra Haas\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000024\",\n    \"subCriteriaPoints\": {\n        \"level3Team\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level3Team\",\n            \"subCriteriaWeight\": 333,\n            \"subCriteriaDescription\": \"Team \",\n            \"value\": 4\n        },\n        \"level3SingleRope\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"level3SingleRope\",\n            \"subCriteriaWeight\": 333,\n            \"subCriteriaDescription\": \"Single Rope\",\n            \"value\": 6\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J8 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J8\",\n    \"judgeName\": \"Lara Zedi\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000024\",\n    \"subCriteriaPoints\": {\n        \"level3Team\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level3Team\",\n            \"subCriteriaWeight\": 333,\n            \"subCriteriaDescription\": \"Team \",\n            \"value\": 4\n        },\n        \"level3SingleRope\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"level3SingleRope\",\n            \"subCriteriaWeight\": 333,\n            \"subCriteriaDescription\": \"Single Rope\",\n            \"value\": 5\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J9 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J9\",\n    \"judgeName\": \"Matthias Zedi\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000024\",\n    \"subCriteriaPoints\": {\n        \"level3Team\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level3Team\",\n            \"subCriteriaWeight\": 333,\n            \"subCriteriaDescription\": \"Team \",\n            \"value\": 4\n        },\n        \"level3SingleRope\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"level3SingleRope\",\n            \"subCriteriaWeight\": 333,\n            \"subCriteriaDescription\": \"Single Rope\",\n            \"value\": 6\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J10\",\n    \"judgeName\": \"Lena Emmenegger\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000027\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"GrosseFehler\",\n            \"value\": 1\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 5\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 1\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 7\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J11\",\n    \"judgeName\": \"Nadja Bühlmann\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000027\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"GrosseFehler\",\n            \"value\": 1\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 5\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 1\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 8\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Carmela Meier\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000027\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"GrosseFehler\",\n            \"value\": 1\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 5\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 1\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 6\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(39.7)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Show U15 B",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Team SM 2022",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Team SM 2022"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=team-u15-teamShow-teamShow-teamShow-MarioKart4Deluxe",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "team-u15-teamShow-teamShow-teamShow-MarioKart4Deluxe"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1 -crea",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Jessica Lehmann\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000026\",\n    \"subCriteriaPoints\": {\n        \"transitions\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"transitions\",\n                \"subCriteriaWeight\": 250,\n                \"subCriteriaDescription\": \"Fliessende Wechsel\",\n                \"value\": 2\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 250,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 9\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 25,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 55\n            },\n            \"changeOfFormations\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"changeOfFormations\",\n                \"subCriteriaWeight\": 250,\n                \"subCriteriaDescription\": \"Formationswechsel\",\n            \"value\": 4\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2 - crea",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Angelika Nobbe\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000026\",\n    \"subCriteriaPoints\": {\n        \"transitions\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"transitions\",\n                \"subCriteriaWeight\": 250,\n                \"subCriteriaDescription\": \"Fliessende Wechsel\",\n                \"value\": 2\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 250,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 10\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 25,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 65\n            },\n            \"changeOfFormations\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"changeOfFormations\",\n                \"subCriteriaWeight\": 250,\n                \"subCriteriaDescription\": \"Formationswechsel\",\n            \"value\": 5\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3 -crea",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Lena Münger\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000026\",\n    \"subCriteriaPoints\": {\n        \"transitions\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"transitions\",\n                \"subCriteriaWeight\": 250,\n                \"subCriteriaDescription\": \"Fliessende Wechsel\",\n                \"value\": 3\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 250,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 8\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 25,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 55\n            },\n            \"changeOfFormations\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"changeOfFormations\",\n                \"subCriteriaWeight\": 250,\n                \"subCriteriaDescription\": \"Formationswechsel\",\n            \"value\": 4\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4 -music",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Marina Schneider\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000025\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 33,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 50\n            },\n            \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 6\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5 -music",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Sandra Angst\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000025\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 33,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 55\n            },\n            \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 6\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6 -music",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J6\",\n    \"judgeName\": \"Gina Eichenberger\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000025\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 33,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 60\n            },\n            \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 7\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J7\",\n    \"judgeName\": \"Sandra Haas\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000024\",\n    \"subCriteriaPoints\": {\n        \"level3Team\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level3Team\",\n            \"subCriteriaWeight\": 333,\n            \"subCriteriaDescription\": \"Team \",\n            \"value\": 0\n        },\n        \"level3SingleRope\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"level3SingleRope\",\n            \"subCriteriaWeight\": 333,\n            \"subCriteriaDescription\": \"Single Rope\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J8 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J8\",\n    \"judgeName\": \"Lara Zedi\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000024\",\n    \"subCriteriaPoints\": {\n        \"level3Team\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level3Team\",\n            \"subCriteriaWeight\": 333,\n            \"subCriteriaDescription\": \"Team \",\n            \"value\": 0\n        },\n        \"level3SingleRope\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"level3SingleRope\",\n            \"subCriteriaWeight\": 333,\n            \"subCriteriaDescription\": \"Single Rope\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J9 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J9\",\n    \"judgeName\": \"Matthias Zedi\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000024\",\n    \"subCriteriaPoints\": {\n        \"level3Team\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level3Team\",\n            \"subCriteriaWeight\": 333,\n            \"subCriteriaDescription\": \"Team \",\n            \"value\": 0\n        },\n        \"level3SingleRope\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"level3SingleRope\",\n            \"subCriteriaWeight\": 333,\n            \"subCriteriaDescription\": \"Single Rope\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J10\",\n    \"judgeName\": \"Lena Emmenegger\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000027\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"GrosseFehler\",\n            \"value\": 2\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 3\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 10\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J11\",\n    \"judgeName\": \"Nadja Bühlmann\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000027\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"GrosseFehler\",\n            \"value\": 2\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 3\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 10\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Carmela Meier\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000027\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"GrosseFehler\",\n            \"value\": 2\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 3\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 9\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(27)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Show U15 C",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Team SM 2022",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Team SM 2022"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=team-u15-teamShow-teamShow-teamShow-Tohuwabohu",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "team-u15-teamShow-teamShow-teamShow-Tohuwabohu"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1 -crea",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Jessica Lehmann\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000026\",\n    \"subCriteriaPoints\": {\n        \"transitions\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"transitions\",\n                \"subCriteriaWeight\": 250,\n                \"subCriteriaDescription\": \"Fliessende Wechsel\",\n                \"value\": 5\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 250,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 4\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 25,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 80\n            },\n            \"changeOfFormations\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"changeOfFormations\",\n                \"subCriteriaWeight\": 250,\n                \"subCriteriaDescription\": \"Formationswechsel\",\n            \"value\": 6\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2 - crea",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Angelika Nobbe\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000026\",\n    \"subCriteriaPoints\": {\n        \"transitions\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"transitions\",\n                \"subCriteriaWeight\": 250,\n                \"subCriteriaDescription\": \"Fliessende Wechsel\",\n                \"value\": 5\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 250,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 4\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 25,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 85\n            },\n            \"changeOfFormations\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"changeOfFormations\",\n                \"subCriteriaWeight\": 250,\n                \"subCriteriaDescription\": \"Formationswechsel\",\n            \"value\": 6\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3 -crea",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Lena Münger\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000026\",\n    \"subCriteriaPoints\": {\n        \"transitions\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"transitions\",\n                \"subCriteriaWeight\": 250,\n                \"subCriteriaDescription\": \"Fliessende Wechsel\",\n                \"value\": 5\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 250,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 5\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 25,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 85\n            },\n            \"changeOfFormations\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"changeOfFormations\",\n                \"subCriteriaWeight\": 250,\n                \"subCriteriaDescription\": \"Formationswechsel\",\n            \"value\": 6\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4 -music",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Marina Schneider\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000025\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 33,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 85\n            },\n            \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 7\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5 -music",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Sandra Angst\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000025\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 33,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 80\n            },\n            \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 7\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6 -music",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J6\",\n    \"judgeName\": \"Gina Eichenberger\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000025\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 33,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 75\n            },\n            \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 7\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J7\",\n    \"judgeName\": \"Sandra Haas\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000024\",\n    \"subCriteriaPoints\": {\n        \"level3Team\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level3Team\",\n            \"subCriteriaWeight\": 333,\n            \"subCriteriaDescription\": \"Team \",\n            \"value\": 3\n        },\n        \"level3SingleRope\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"level3SingleRope\",\n            \"subCriteriaWeight\": 333,\n            \"subCriteriaDescription\": \"Single Rope\",\n            \"value\": 5\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J8 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J8\",\n    \"judgeName\": \"Lara Zedi\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000024\",\n    \"subCriteriaPoints\": {\n        \"level3Team\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level3Team\",\n            \"subCriteriaWeight\": 333,\n            \"subCriteriaDescription\": \"Team \",\n            \"value\": 3\n        },\n        \"level3SingleRope\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"level3SingleRope\",\n            \"subCriteriaWeight\": 333,\n            \"subCriteriaDescription\": \"Single Rope\",\n            \"value\": 5\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J9 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J9\",\n    \"judgeName\": \"Matthias Zedi\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000024\",\n    \"subCriteriaPoints\": {\n        \"level3Team\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level3Team\",\n            \"subCriteriaWeight\": 333,\n            \"subCriteriaDescription\": \"Team \",\n            \"value\": 3\n        },\n        \"level3SingleRope\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"level3SingleRope\",\n            \"subCriteriaWeight\": 333,\n            \"subCriteriaDescription\": \"Single Rope\",\n            \"value\": 5\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J10\",\n    \"judgeName\": \"Lena Emmenegger\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000027\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"GrosseFehler\",\n            \"value\": 0\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 4\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 1\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 6\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J11\",\n    \"judgeName\": \"Nadja Bühlmann\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000027\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"GrosseFehler\",\n            \"value\": 0\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 4\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 1\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 7\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Carmela Meier\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000027\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"GrosseFehler\",\n            \"value\": 0\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 4\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 1\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 8\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(40.1)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed SR ERSO X",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Team SM 2022",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Team SM 2022"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=team-open-erso-speed-singleRopeRelay-Barbamama",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "team-open-erso-speed-singleRopeRelay-Barbamama"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Adrian Wenger\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 311\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Mirjam Schlatter\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 305\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Carmela Meier\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 312\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(312)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed SR ERSO Y",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Team SM 2022",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Team SM 2022"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=team-open-erso-speed-singleRopeRelay-Barbapapa",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "team-open-erso-speed-singleRopeRelay-Barbapapa"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Matthias Zedi\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 320\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Gina Eichenberger\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 321\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J6\",\n    \"judgeName\": \"Marcel Soland\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 320\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(320)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed SR ERSO Z",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Team SM 2022",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Team SM 2022"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=team-open-erso-speed-singleRopeRelay-let's fätz",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "team-open-erso-speed-singleRopeRelay-let's fätz"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J7\",\n    \"judgeName\": \"Sandra Haas\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 280\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J8\",\n    \"judgeName\": \"Melanie Peier\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 275\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J9\",\n    \"judgeName\": \"Ramona Schär\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 272\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(276)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed DD ERSO X",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Team SM 2022",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Team SM 2022"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=team-open-erso-speed-doubleDutchRelay-Barbamama",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "team-open-erso-speed-doubleDutchRelay-Barbamama"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Matthias Zedi\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 401\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Gina Eichenberger\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 401\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J6\",\n    \"judgeName\": \"Marcel Soland\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 401\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(401)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed DD ERSO Y",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Team SM 2022",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Team SM 2022"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=team-open-erso-speed-doubleDutchRelay-Barbapapa",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "team-open-erso-speed-doubleDutchRelay-Barbapapa"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J7\",\n    \"judgeName\": \"Sandra Haas\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 350\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J8\",\n    \"judgeName\": \"Melanie Peier\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 521\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J9\",\n    \"judgeName\": \"Ramona Schär\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 351\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(351)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed DD ERSO Z",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Team SM 2022",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Team SM 2022"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=team-open-erso-speed-doubleDutchRelay-let's fätz",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "team-open-erso-speed-doubleDutchRelay-let's fätz"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J10\",\n    \"judgeName\": \"Angelika Nobbe\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 380\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J11\",\n    \"judgeName\": \"Lena Münger\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 385\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Rahel Weber\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 376\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(376)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ERSO PAIRS X",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Team SM 2022",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Team SM 2022"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=team-open-erso-freestyle-singleRopePair-Barbamama",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "team-open-erso-freestyle-singleRopePair-Barbamama"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Emma Synak\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000014\",\n    \"subCriteriaPoints\": {\n            \"movement\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"movement\",\n                \"subCriteriaWeight\": 8.333333333,\n                \"subCriteriaDescription\": \"Bewegung\",\n                \"value\": 75\n            },\n            \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 80\n            },\n           \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 83.33333333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n                \"value\": 8\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 6\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 65\n            },\n            \"overallImpression\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"overallImpression\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Gesamteindruck\",\n                \"value\": 65\n            },\n            \"movementAcrossFloor\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"movementAcrossFloor\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n            \"value\": 4\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Melanie Peier\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000014\",\n    \"subCriteriaPoints\": {\n             \"movement\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"movement\",\n                \"subCriteriaWeight\": 8.333333333,\n                \"subCriteriaDescription\": \"Bewegung\",\n                \"value\": 70\n            },\n           \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 85\n            },\n           \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 83.33333333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n                \"value\": 8\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 5\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 65\n            },\n            \"overallImpression\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"overallImpression\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Gesamteindruck\",\n                \"value\": 70\n            },\n            \"movementAcrossFloor\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"movementAcrossFloor\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n            \"value\": 4\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Martin Angst\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000014\",\n    \"subCriteriaPoints\": {\n             \"movement\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"movement\",\n                \"subCriteriaWeight\": 8.333333333,\n                \"subCriteriaDescription\": \"Bewegung\",\n                \"value\": 80\n            },\n           \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 85\n            },\n           \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 83.33333333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n                \"value\": 7\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 6\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 60\n            },\n            \"overallImpression\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"overallImpression\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Gesamteindruck\",\n                \"value\": 65\n            },\n            \"movementAcrossFloor\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"movementAcrossFloor\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n            \"value\": 4\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Jessica Lehmann\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000013\",\n    \"subCriteriaPoints\": {\n        \"wraps\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"wraps\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Wraps\",\n                \"value\": 1\n            },\n            \"powers\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"powers\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Powers\",\n                \"value\": 2\n            },\n            \"releases\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"releases\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Releases\",\n                \"value\": 1\n            },\n            \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 2\n            },\n            \"setOfCrosses\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"setOfCrosses\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n                \"value\": 4\n            },\n            \"setOfMultiples\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"setOfMultiples\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n                \"value\": 5\n            },\n            \"pairInteractions\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"pairInteractions\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Pair Interactions\",\n                \"value\": 2\n            },\n            \"setOfDirectionChanges\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"setOfDirectionChanges\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Lena Münger\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000013\",\n    \"subCriteriaPoints\": {\n        \"wraps\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"wraps\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Wraps\",\n                \"value\": 1\n            },\n            \"powers\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"powers\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Powers\",\n                \"value\": 2\n            },\n            \"releases\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"releases\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Releases\",\n                \"value\": 1\n            },\n            \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 2\n            },\n            \"setOfCrosses\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"setOfCrosses\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n                \"value\": 4\n            },\n            \"setOfMultiples\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"setOfMultiples\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n                \"value\": 5\n            },\n            \"pairInteractions\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"pairInteractions\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Pair Interactions\",\n                \"value\": 3\n            },\n            \"setOfDirectionChanges\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"setOfDirectionChanges\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J6\",\n    \"judgeName\": \"Mirjam Schlatter\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000013\",\n    \"subCriteriaPoints\": {\n        \"wraps\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"wraps\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Wraps\",\n                \"value\": 1\n            },\n            \"powers\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"powers\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Powers\",\n                \"value\": 2\n            },\n            \"releases\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"releases\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Releases\",\n                \"value\": 1\n            },\n            \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 2\n            },\n            \"setOfCrosses\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"setOfCrosses\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n                \"value\": 4\n            },\n            \"setOfMultiples\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"setOfMultiples\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n                \"value\": 5\n            },\n            \"pairInteractions\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"pairInteractions\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Pair Interactions\",\n                \"value\": 3\n            },\n            \"setOfDirectionChanges\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"setOfDirectionChanges\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 3\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J7\",\n    \"judgeName\": \"Matthias Zedi\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000012\",\n    \"subCriteriaPoints\": {\n        \"level2\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level2\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Level 2\",\n            \"value\": 7\n        },\n        \"level3\": {\n            \"step\": 1,\n            \"rangeEnd\": 19,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"level3\",\n            \"subCriteriaWeight\": 160,\n            \"subCriteriaDescription\": \"Level 3\",\n            \"value\": 8\n        },\n        \"level4\": {\n            \"step\": 1,\n            \"rangeEnd\": 13,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"level4\",\n            \"subCriteriaWeight\": 230,\n            \"subCriteriaDescription\": \"Level 4\",\n            \"value\": 6\n        },\n        \"level5\": {\n            \"step\": 1,\n            \"rangeEnd\": 29,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"level5\",\n            \"subCriteriaWeight\": 350,\n            \"subCriteriaDescription\": \"Level 5\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J8 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J8\",\n    \"judgeName\": \"Luana Betschart\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000012\",\n    \"subCriteriaPoints\": {\n        \"level2\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level2\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Level 2\",\n            \"value\": 8\n        },\n        \"level3\": {\n            \"step\": 1,\n            \"rangeEnd\": 19,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"level3\",\n            \"subCriteriaWeight\": 160,\n            \"subCriteriaDescription\": \"Level 3\",\n            \"value\": 8\n        },\n        \"level4\": {\n            \"step\": 1,\n            \"rangeEnd\": 13,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"level4\",\n            \"subCriteriaWeight\": 230,\n            \"subCriteriaDescription\": \"Level 4\",\n            \"value\": 5\n        },\n        \"level5\": {\n            \"step\": 1,\n            \"rangeEnd\": 29,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"level5\",\n            \"subCriteriaWeight\": 350,\n            \"subCriteriaDescription\": \"Level 5\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J9 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J9\",\n    \"judgeName\": \"Stefanie Schneider\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000012\",\n    \"subCriteriaPoints\": {\n        \"level2\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level2\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Level 2\",\n            \"value\": 7\n        },\n        \"level3\": {\n            \"step\": 1,\n            \"rangeEnd\": 19,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"level3\",\n            \"subCriteriaWeight\": 160,\n            \"subCriteriaDescription\": \"Level 3\",\n            \"value\": 8\n        },\n        \"level4\": {\n            \"step\": 1,\n            \"rangeEnd\": 13,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"level4\",\n            \"subCriteriaWeight\": 230,\n            \"subCriteriaDescription\": \"Level 4\",\n            \"value\": 6\n        },\n        \"level5\": {\n            \"step\": 1,\n            \"rangeEnd\": 29,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"level5\",\n            \"subCriteriaWeight\": 350,\n            \"subCriteriaDescription\": \"Level 5\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J10\",\n    \"judgeName\": \"Ramona Schär\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000015\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 1\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 3\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 5\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J11\",\n    \"judgeName\": \"Rahel Stöckli\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000015\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 1\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 3\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 6\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Rahel Weber\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000015\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 1\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 3\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 7\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(49.6)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ERSO PAIRS Y",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Team SM 2022",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Team SM 2022"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=team-open-erso-freestyle-singleRopePair-Barbapapa",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "team-open-erso-freestyle-singleRopePair-Barbapapa"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Emma Synak\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000014\",\n    \"subCriteriaPoints\": {\n            \"movement\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"movement\",\n                \"subCriteriaWeight\": 8.333333333,\n                \"subCriteriaDescription\": \"Bewegung\",\n                \"value\": 85\n            },\n            \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 70\n            },\n            \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 83.33333333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n                \"value\": 15\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 5\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 80\n            },\n            \"overallImpression\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"overallImpression\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Gesamteindruck\",\n                \"value\": 80\n            },\n            \"movementAcrossFloor\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"movementAcrossFloor\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n            \"value\": 5\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Melanie Peier\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000014\",\n    \"subCriteriaPoints\": {\n            \"movement\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"movement\",\n                \"subCriteriaWeight\": 8.333333333,\n                \"subCriteriaDescription\": \"Bewegung\",\n                \"value\": 80\n            },\n            \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 70\n            },\n            \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 83.33333333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n                \"value\": 14\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 4\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 85\n            },\n            \"overallImpression\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"overallImpression\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Gesamteindruck\",\n                \"value\": 80\n            },\n            \"movementAcrossFloor\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"movementAcrossFloor\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n            \"value\": 5\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Martin Angst\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000014\",\n    \"subCriteriaPoints\": {\n            \"movement\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"movement\",\n                \"subCriteriaWeight\": 8.333333333,\n                \"subCriteriaDescription\": \"Bewegung\",\n                \"value\": 90\n            },\n            \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 75\n            },\n            \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 83.33333333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n                \"value\": 14\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 5\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 80\n            },\n            \"overallImpression\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"overallImpression\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Gesamteindruck\",\n                \"value\": 85\n            },\n            \"movementAcrossFloor\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"movementAcrossFloor\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n            \"value\": 5\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Jessica Lehmann\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000013\",\n    \"subCriteriaPoints\": {\n        \"wraps\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"wraps\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Wraps\",\n                \"value\": 2\n            },\n            \"powers\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"powers\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Powers\",\n                \"value\": 1\n            },\n            \"releases\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"releases\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Releases\",\n                \"value\": 1\n            },\n            \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 2\n            },\n            \"setOfCrosses\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"setOfCrosses\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n                \"value\": 6\n            },\n            \"setOfMultiples\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"setOfMultiples\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n                \"value\": 5\n            },\n            \"pairInteractions\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"pairInteractions\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Pair Interactions\",\n                \"value\": 3\n            },\n            \"setOfDirectionChanges\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"setOfDirectionChanges\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 3\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Lena Münger\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000013\",\n    \"subCriteriaPoints\": {\n        \"wraps\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"wraps\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Wraps\",\n                \"value\": 2\n            },\n            \"powers\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"powers\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Powers\",\n                \"value\": 1\n            },\n            \"releases\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"releases\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Releases\",\n                \"value\": 1\n            },\n            \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 2\n            },\n            \"setOfCrosses\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"setOfCrosses\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n                \"value\": 6\n            },\n            \"setOfMultiples\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"setOfMultiples\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n                \"value\": 5\n            },\n            \"pairInteractions\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"pairInteractions\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Pair Interactions\",\n                \"value\": 3\n            },\n            \"setOfDirectionChanges\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"setOfDirectionChanges\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 3\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J6\",\n    \"judgeName\": \"Mirjam Schlatter\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000013\",\n    \"subCriteriaPoints\": {\n        \"wraps\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"wraps\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Wraps\",\n                \"value\": 2\n            },\n            \"powers\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"powers\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Powers\",\n                \"value\": 1\n            },\n            \"releases\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"releases\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Releases\",\n                \"value\": 1\n            },\n            \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 2\n            },\n            \"setOfCrosses\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"setOfCrosses\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n                \"value\": 6\n            },\n            \"setOfMultiples\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"setOfMultiples\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n                \"value\": 6\n            },\n            \"pairInteractions\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"pairInteractions\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Pair Interactions\",\n                \"value\": 3\n            },\n            \"setOfDirectionChanges\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"setOfDirectionChanges\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 3\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J7\",\n    \"judgeName\": \"Matthias Zedi\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000012\",\n    \"subCriteriaPoints\": {\n        \"level2\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level2\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Level 2\",\n            \"value\": 10\n        },\n        \"level3\": {\n            \"step\": 1,\n            \"rangeEnd\": 19,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"level3\",\n            \"subCriteriaWeight\": 160,\n            \"subCriteriaDescription\": \"Level 3\",\n            \"value\": 9\n        },\n        \"level4\": {\n            \"step\": 1,\n            \"rangeEnd\": 13,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"level4\",\n            \"subCriteriaWeight\": 230,\n            \"subCriteriaDescription\": \"Level 4\",\n            \"value\": 7\n        },\n        \"level5\": {\n            \"step\": 1,\n            \"rangeEnd\": 29,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"level5\",\n            \"subCriteriaWeight\": 350,\n            \"subCriteriaDescription\": \"Level 5\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J8 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J8\",\n    \"judgeName\": \"Luana Betschart\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000012\",\n    \"subCriteriaPoints\": {\n        \"level2\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level2\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Level 2\",\n            \"value\": 10\n        },\n        \"level3\": {\n            \"step\": 1,\n            \"rangeEnd\": 19,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"level3\",\n            \"subCriteriaWeight\": 160,\n            \"subCriteriaDescription\": \"Level 3\",\n            \"value\": 9\n        },\n        \"level4\": {\n            \"step\": 1,\n            \"rangeEnd\": 13,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"level4\",\n            \"subCriteriaWeight\": 230,\n            \"subCriteriaDescription\": \"Level 4\",\n            \"value\": 8\n        },\n        \"level5\": {\n            \"step\": 1,\n            \"rangeEnd\": 29,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"level5\",\n            \"subCriteriaWeight\": 350,\n            \"subCriteriaDescription\": \"Level 5\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J9 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J9\",\n    \"judgeName\": \"Stefanie Schneider\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000012\",\n    \"subCriteriaPoints\": {\n        \"level2\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level2\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Level 2\",\n            \"value\": 10\n        },\n        \"level3\": {\n            \"step\": 1,\n            \"rangeEnd\": 19,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"level3\",\n            \"subCriteriaWeight\": 160,\n            \"subCriteriaDescription\": \"Level 3\",\n            \"value\": 9\n        },\n        \"level4\": {\n            \"step\": 1,\n            \"rangeEnd\": 13,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"level4\",\n            \"subCriteriaWeight\": 230,\n            \"subCriteriaDescription\": \"Level 4\",\n            \"value\": 9\n        },\n        \"level5\": {\n            \"step\": 1,\n            \"rangeEnd\": 29,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"level5\",\n            \"subCriteriaWeight\": 350,\n            \"subCriteriaDescription\": \"Level 5\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J10\",\n    \"judgeName\": \"Ramona Schär\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000015\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 2\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 3\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 1\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 4\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J11\",\n    \"judgeName\": \"Rahel Stöckli\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000015\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 2\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 3\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 1\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 4\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Rahel Weber\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000015\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 2\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 3\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 1\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 3\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(56.0)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ERSO PAIRS Z",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Team SM 2022",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Team SM 2022"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=team-open-erso-freestyle-singleRopePair-let's fätz",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "team-open-erso-freestyle-singleRopePair-let's fätz"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Emma Synak\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000014\",\n    \"subCriteriaPoints\": {\n            \"movement\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"movement\",\n                \"subCriteriaWeight\": 8.333333333,\n                \"subCriteriaDescription\": \"Bewegung\",\n                \"value\": 60\n            },\n            \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 50\n            },\n           \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 83.33333333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n                \"value\": 4\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 7\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 50\n            },\n            \"overallImpression\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"overallImpression\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Gesamteindruck\",\n                \"value\": 50\n            },\n            \"movementAcrossFloor\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"movementAcrossFloor\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n            \"value\": 3\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Melanie Peier\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000014\",\n    \"subCriteriaPoints\": {\n            \"movement\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"movement\",\n                \"subCriteriaWeight\": 8.333333333,\n                \"subCriteriaDescription\": \"Bewegung\",\n                \"value\": 55\n            },\n            \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 55\n            },\n           \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 83.33333333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n                \"value\": 4\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 6\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 45\n            },\n            \"overallImpression\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"overallImpression\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Gesamteindruck\",\n                \"value\": 50\n            },\n            \"movementAcrossFloor\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"movementAcrossFloor\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n            \"value\": 3\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Martin Angst\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000014\",\n    \"subCriteriaPoints\": {\n            \"movement\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"movement\",\n                \"subCriteriaWeight\": 8.333333333,\n                \"subCriteriaDescription\": \"Bewegung\",\n                \"value\": 60\n            },\n            \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 60\n            },\n           \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 83.33333333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n                \"value\": 4\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 5\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 55\n            },\n            \"overallImpression\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"overallImpression\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Gesamteindruck\",\n                \"value\": 55\n            },\n            \"movementAcrossFloor\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"movementAcrossFloor\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n            \"value\": 3\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Jessica Lehmann\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000013\",\n    \"subCriteriaPoints\": {\n        \"wraps\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"wraps\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Wraps\",\n                \"value\": 1\n            },\n            \"powers\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"powers\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Powers\",\n                \"value\": 1\n            },\n            \"releases\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"releases\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Releases\",\n                \"value\": 1\n            },\n            \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 2\n            },\n            \"setOfCrosses\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"setOfCrosses\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n                \"value\": 3\n            },\n            \"setOfMultiples\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"setOfMultiples\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n                \"value\": 4\n            },\n            \"pairInteractions\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"pairInteractions\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Pair Interactions\",\n                \"value\": 0\n            },\n            \"setOfDirectionChanges\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"setOfDirectionChanges\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Lena Münger\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000013\",\n    \"subCriteriaPoints\": {\n        \"wraps\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"wraps\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Wraps\",\n                \"value\": 1\n            },\n            \"powers\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"powers\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Powers\",\n                \"value\": 1\n            },\n            \"releases\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"releases\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Releases\",\n                \"value\": 1\n            },\n            \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 2\n            },\n            \"setOfCrosses\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"setOfCrosses\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n                \"value\": 3\n            },\n            \"setOfMultiples\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"setOfMultiples\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n                \"value\": 4\n            },\n            \"pairInteractions\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"pairInteractions\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Pair Interactions\",\n                \"value\": 0\n            },\n            \"setOfDirectionChanges\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"setOfDirectionChanges\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J6\",\n    \"judgeName\": \"Mirjam Schlatter\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000013\",\n    \"subCriteriaPoints\": {\n        \"wraps\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"wraps\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Wraps\",\n                \"value\": 1\n            },\n            \"powers\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"powers\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Powers\",\n                \"value\": 1\n            },\n            \"releases\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"releases\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Releases\",\n                \"value\": 0\n            },\n            \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 2\n            },\n            \"setOfCrosses\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"setOfCrosses\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n                \"value\": 2\n            },\n            \"setOfMultiples\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"setOfMultiples\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n                \"value\": 4\n            },\n            \"pairInteractions\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"pairInteractions\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Pair Interactions\",\n                \"value\": 0\n            },\n            \"setOfDirectionChanges\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"setOfDirectionChanges\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J7\",\n    \"judgeName\": \"Matthias Zedi\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000012\",\n    \"subCriteriaPoints\": {\n        \"level2\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level2\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Level 2\",\n            \"value\": 10\n        },\n        \"level3\": {\n            \"step\": 1,\n            \"rangeEnd\": 19,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"level3\",\n            \"subCriteriaWeight\": 160,\n            \"subCriteriaDescription\": \"Level 3\",\n            \"value\": 7\n        },\n        \"level4\": {\n            \"step\": 1,\n            \"rangeEnd\": 13,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"level4\",\n            \"subCriteriaWeight\": 230,\n            \"subCriteriaDescription\": \"Level 4\",\n            \"value\": 5\n        },\n        \"level5\": {\n            \"step\": 1,\n            \"rangeEnd\": 29,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"level5\",\n            \"subCriteriaWeight\": 350,\n            \"subCriteriaDescription\": \"Level 5\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J8 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J8\",\n    \"judgeName\": \"Luana Betschart\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000012\",\n    \"subCriteriaPoints\": {\n        \"level2\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level2\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Level 2\",\n            \"value\": 10\n        },\n        \"level3\": {\n            \"step\": 1,\n            \"rangeEnd\": 19,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"level3\",\n            \"subCriteriaWeight\": 160,\n            \"subCriteriaDescription\": \"Level 3\",\n            \"value\": 8\n        },\n        \"level4\": {\n            \"step\": 1,\n            \"rangeEnd\": 13,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"level4\",\n            \"subCriteriaWeight\": 230,\n            \"subCriteriaDescription\": \"Level 4\",\n            \"value\": 5\n        },\n        \"level5\": {\n            \"step\": 1,\n            \"rangeEnd\": 29,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"level5\",\n            \"subCriteriaWeight\": 350,\n            \"subCriteriaDescription\": \"Level 5\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J9 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J9\",\n    \"judgeName\": \"Stefanie Schneider\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000012\",\n    \"subCriteriaPoints\": {\n        \"level2\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level2\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Level 2\",\n            \"value\": 10\n        },\n        \"level3\": {\n            \"step\": 1,\n            \"rangeEnd\": 19,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"level3\",\n            \"subCriteriaWeight\": 160,\n            \"subCriteriaDescription\": \"Level 3\",\n            \"value\": 7\n        },\n        \"level4\": {\n            \"step\": 1,\n            \"rangeEnd\": 13,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"level4\",\n            \"subCriteriaWeight\": 230,\n            \"subCriteriaDescription\": \"Level 4\",\n            \"value\": 5\n        },\n        \"level5\": {\n            \"step\": 1,\n            \"rangeEnd\": 29,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"level5\",\n            \"subCriteriaWeight\": 350,\n            \"subCriteriaDescription\": \"Level 5\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J10\",\n    \"judgeName\": \"Ramona Schär\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000015\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 4\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 2\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 6\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J11\",\n    \"judgeName\": \"Rahel Stöckli\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000015\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 4\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 3\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 7\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Rahel Weber\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000015\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 3\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 2\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 6\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(34.6)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ERSO TEAM X",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Team SM 2022",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Team SM 2022"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=team-open-erso-freestyle-singleRopeTeam-Barbamama",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "team-open-erso-freestyle-singleRopeTeam-Barbamama"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Emma Synak\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000018\",\n    \"subCriteriaPoints\": {\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Bewegung\",\n            \"value\": 75\n        },\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n            \"value\": 75\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 5\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 4\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n            \"value\": 90\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck\",\n            \"value\": 80\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Melanie Peier\",\n     \"criteriaId\": \"11111111-0000-0000-0000-000000000018\",\n    \"subCriteriaPoints\": {\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Bewegung\",\n            \"value\": 80\n        },\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n            \"value\": 65\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 5\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 5\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n            \"value\": 90\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck\",\n            \"value\": 80\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Martin Angst\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000018\",\n    \"subCriteriaPoints\": {\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Bewegung\",\n            \"value\": 80\n        },\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n            \"value\": 65\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 5\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 7\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n            \"value\": 85\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck\",\n            \"value\": 80\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Jessica Lehmann\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000017\",\n    \"subCriteriaPoints\": {\n        \"wraps\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"wraps\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Wraps\",\n                \"value\": 1\n            },\n            \"powers\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"powers\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Powers\",\n                \"value\": 0\n            },\n            \"releases\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"releases\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Releases\",\n                \"value\": 2\n            },\n            \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 2\n            },\n            \"setOfCrosses\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"setOfCrosses\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n                \"value\": 4\n            },\n            \"setOfMultiples\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"setOfMultiples\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n                \"value\": 5\n            },\n            \"pairInteractions\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"pairInteractions\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Pair Interactions\",\n                \"value\": 2\n            },\n            \"setOfDirectionChanges\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"setOfDirectionChanges\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Lena Münger\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000017\",\n    \"subCriteriaPoints\": {\n        \"wraps\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"wraps\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Wraps\",\n                \"value\": 2\n            },\n            \"powers\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"powers\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Powers\",\n                \"value\": 0\n            },\n            \"releases\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"releases\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Releases\",\n                \"value\": 2\n            },\n            \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 2\n            },\n            \"setOfCrosses\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"setOfCrosses\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n                \"value\": 3\n            },\n            \"setOfMultiples\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"setOfMultiples\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n                \"value\": 5\n            },\n            \"pairInteractions\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"pairInteractions\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Pair Interactions\",\n                \"value\": 1\n            },\n            \"setOfDirectionChanges\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"setOfDirectionChanges\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J6\",\n    \"judgeName\": \"Mirjam Schlatter\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000017\",\n    \"subCriteriaPoints\": {\n        \"wraps\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"wraps\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Wraps\",\n                \"value\": 1\n            },\n            \"powers\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"powers\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Powers\",\n                \"value\": 0\n            },\n            \"releases\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"releases\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Releases\",\n                \"value\": 2\n            },\n            \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 2\n            },\n            \"setOfCrosses\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"setOfCrosses\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n                \"value\": 4\n            },\n            \"setOfMultiples\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"setOfMultiples\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n                \"value\": 5\n            },\n            \"pairInteractions\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"pairInteractions\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Pair Interactions\",\n                \"value\": 3\n            },\n            \"setOfDirectionChanges\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"setOfDirectionChanges\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J7\",\n    \"judgeName\": \"Matthias Zedi\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000016\",\n    \"subCriteriaPoints\": {\n        \"level2\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level2\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Level 2\",\n            \"value\": 13\n        },\n        \"level3\": {\n            \"step\": 1,\n            \"rangeEnd\": 19,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"level3\",\n            \"subCriteriaWeight\": 160,\n            \"subCriteriaDescription\": \"Level 3\",\n            \"value\": 8\n        },\n        \"level4\": {\n            \"step\": 1,\n            \"rangeEnd\": 13,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"level4\",\n            \"subCriteriaWeight\": 230,\n            \"subCriteriaDescription\": \"Level 4\",\n            \"value\": 3\n        },\n        \"level5\": {\n            \"step\": 1,\n            \"rangeEnd\": 29,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"level5\",\n            \"subCriteriaWeight\": 350,\n            \"subCriteriaDescription\": \"Level 5\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J8 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J8\",\n    \"judgeName\": \"Luana Betschart\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000016\",\n    \"subCriteriaPoints\": {\n        \"level2\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level2\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Level 2\",\n            \"value\": 12\n        },\n        \"level3\": {\n            \"step\": 1,\n            \"rangeEnd\": 19,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"level3\",\n            \"subCriteriaWeight\": 160,\n            \"subCriteriaDescription\": \"Level 3\",\n            \"value\": 8\n        },\n        \"level4\": {\n            \"step\": 1,\n            \"rangeEnd\": 13,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"level4\",\n            \"subCriteriaWeight\": 230,\n            \"subCriteriaDescription\": \"Level 4\",\n            \"value\": 4\n        },\n        \"level5\": {\n            \"step\": 1,\n            \"rangeEnd\": 29,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"level5\",\n            \"subCriteriaWeight\": 350,\n            \"subCriteriaDescription\": \"Level 5\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J9 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J9\",\n    \"judgeName\": \"Stefanie Schneider\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000016\",\n    \"subCriteriaPoints\": {\n        \"level2\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level2\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Level 2\",\n            \"value\": 15\n        },\n        \"level3\": {\n            \"step\": 1,\n            \"rangeEnd\": 19,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"level3\",\n            \"subCriteriaWeight\": 160,\n            \"subCriteriaDescription\": \"Level 3\",\n            \"value\": 8\n        },\n        \"level4\": {\n            \"step\": 1,\n            \"rangeEnd\": 13,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"level4\",\n            \"subCriteriaWeight\": 230,\n            \"subCriteriaDescription\": \"Level 4\",\n            \"value\": 3\n        },\n        \"level5\": {\n            \"step\": 1,\n            \"rangeEnd\": 29,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"level5\",\n            \"subCriteriaWeight\": 350,\n            \"subCriteriaDescription\": \"Level 5\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J10\",\n    \"judgeName\": \"Ramona Schär\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000019\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 1\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 4\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 7\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J11\",\n    \"judgeName\": \"Rahel Stöckli\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000019\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 1\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 4\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 7\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Rahel Weber\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000019\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 1\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 4\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 6\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(47.1)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ERSO TEAM Y",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Team SM 2022",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Team SM 2022"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=team-open-erso-freestyle-singleRopeTeam-Barbapapa",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "team-open-erso-freestyle-singleRopeTeam-Barbapapa"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Emma Synak\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000018\",\n    \"subCriteriaPoints\": {\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Bewegung\",\n            \"value\": 60\n        },\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n            \"value\": 55\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 7\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 3\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n            \"value\": 70\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck\",\n            \"value\": 65\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Melanie Peier\",\n     \"criteriaId\": \"11111111-0000-0000-0000-000000000018\",\n    \"subCriteriaPoints\": {\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Bewegung\",\n            \"value\": 60\n        },\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n            \"value\": 55\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 7\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 3\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n            \"value\": 75\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck\",\n            \"value\": 70\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Martin Angst\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000018\",\n    \"subCriteriaPoints\": {\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Bewegung\",\n            \"value\": 55\n        },\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n            \"value\": 55\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 6\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 3\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n            \"value\": 70\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck\",\n            \"value\": 70\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Jessica Lehmann\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000017\",\n    \"subCriteriaPoints\": {\n        \"wraps\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"wraps\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Wraps\",\n                \"value\": 2\n            },\n            \"powers\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"powers\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Powers\",\n                \"value\": 0\n            },\n            \"releases\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"releases\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Releases\",\n                \"value\": 2\n            },\n            \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 1\n            },\n            \"setOfCrosses\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"setOfCrosses\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n                \"value\": 6\n            },\n            \"setOfMultiples\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"setOfMultiples\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n                \"value\": 4\n            },\n            \"pairInteractions\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"pairInteractions\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Pair Interactions\",\n                \"value\": 3\n            },\n            \"setOfDirectionChanges\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"setOfDirectionChanges\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Lena Münger\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000017\",\n    \"subCriteriaPoints\": {\n        \"wraps\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"wraps\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Wraps\",\n                \"value\": 2\n            },\n            \"powers\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"powers\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Powers\",\n                \"value\": 0\n            },\n            \"releases\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"releases\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Releases\",\n                \"value\": 2\n            },\n            \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 1\n            },\n            \"setOfCrosses\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"setOfCrosses\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n                \"value\": 6\n            },\n            \"setOfMultiples\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"setOfMultiples\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n                \"value\": 4\n            },\n            \"pairInteractions\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"pairInteractions\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Pair Interactions\",\n                \"value\": 3\n            },\n            \"setOfDirectionChanges\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"setOfDirectionChanges\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J6\",\n    \"judgeName\": \"Mirjam Schlatter\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000017\",\n    \"subCriteriaPoints\": {\n        \"wraps\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"wraps\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Wraps\",\n                \"value\": 2\n            },\n            \"powers\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"powers\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Powers\",\n                \"value\": 0\n            },\n            \"releases\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"releases\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Releases\",\n                \"value\": 2\n            },\n            \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 1\n            },\n            \"setOfCrosses\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"setOfCrosses\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n                \"value\": 6\n            },\n            \"setOfMultiples\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"setOfMultiples\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n                \"value\": 3\n            },\n            \"pairInteractions\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"pairInteractions\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Pair Interactions\",\n                \"value\": 3\n            },\n            \"setOfDirectionChanges\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"setOfDirectionChanges\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J7\",\n    \"judgeName\": \"Matthias Zedi\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000016\",\n    \"subCriteriaPoints\": {\n        \"level2\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level2\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Level 2\",\n            \"value\": 16\n        },\n        \"level3\": {\n            \"step\": 1,\n            \"rangeEnd\": 19,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"level3\",\n            \"subCriteriaWeight\": 160,\n            \"subCriteriaDescription\": \"Level 3\",\n            \"value\": 15\n        },\n        \"level4\": {\n            \"step\": 1,\n            \"rangeEnd\": 13,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"level4\",\n            \"subCriteriaWeight\": 230,\n            \"subCriteriaDescription\": \"Level 4\",\n            \"value\": 3\n        },\n        \"level5\": {\n            \"step\": 1,\n            \"rangeEnd\": 29,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"level5\",\n            \"subCriteriaWeight\": 350,\n            \"subCriteriaDescription\": \"Level 5\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J8 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J8\",\n    \"judgeName\": \"Luana Betschart\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000016\",\n    \"subCriteriaPoints\": {\n        \"level2\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level2\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Level 2\",\n            \"value\": 17\n        },\n        \"level3\": {\n            \"step\": 1,\n            \"rangeEnd\": 19,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"level3\",\n            \"subCriteriaWeight\": 160,\n            \"subCriteriaDescription\": \"Level 3\",\n            \"value\": 15\n        },\n        \"level4\": {\n            \"step\": 1,\n            \"rangeEnd\": 13,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"level4\",\n            \"subCriteriaWeight\": 230,\n            \"subCriteriaDescription\": \"Level 4\",\n            \"value\": 3\n        },\n        \"level5\": {\n            \"step\": 1,\n            \"rangeEnd\": 29,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"level5\",\n            \"subCriteriaWeight\": 350,\n            \"subCriteriaDescription\": \"Level 5\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J9 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J9\",\n    \"judgeName\": \"Stefanie Schneider\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000016\",\n    \"subCriteriaPoints\": {\n        \"level2\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level2\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Level 2\",\n            \"value\": 17\n        },\n        \"level3\": {\n            \"step\": 1,\n            \"rangeEnd\": 19,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"level3\",\n            \"subCriteriaWeight\": 160,\n            \"subCriteriaDescription\": \"Level 3\",\n            \"value\": 14\n        },\n        \"level4\": {\n            \"step\": 1,\n            \"rangeEnd\": 13,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"level4\",\n            \"subCriteriaWeight\": 230,\n            \"subCriteriaDescription\": \"Level 4\",\n            \"value\": 3\n        },\n        \"level5\": {\n            \"step\": 1,\n            \"rangeEnd\": 29,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"level5\",\n            \"subCriteriaWeight\": 350,\n            \"subCriteriaDescription\": \"Level 5\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J10\",\n    \"judgeName\": \"Ramona Schär\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000019\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 1\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 7\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 14\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J11\",\n    \"judgeName\": \"Rahel Stöckli\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000019\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 1\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 7\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 13\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Rahel Weber\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000019\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 1\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 7\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 14\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(49.1)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ERSO TEAM Z",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Team SM 2022",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Team SM 2022"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=team-open-erso-freestyle-singleRopeTeam-let's fätz",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "team-open-erso-freestyle-singleRopeTeam-let's fätz"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Emma Synak\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000018\",\n    \"subCriteriaPoints\": {\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Bewegung\",\n            \"value\": 70\n        },\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n            \"value\": 65\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 7\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 7\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n            \"value\": 70\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck\",\n            \"value\": 70\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Melanie Peier\",\n     \"criteriaId\": \"11111111-0000-0000-0000-000000000018\",\n    \"subCriteriaPoints\": {\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Bewegung\",\n            \"value\": 70\n        },\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n            \"value\": 50\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 7\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 7\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n            \"value\": 65\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck\",\n            \"value\": 70\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Martin Angst\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000018\",\n    \"subCriteriaPoints\": {\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Bewegung\",\n            \"value\": 70\n        },\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n            \"value\": 60\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 6\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 8\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n            \"value\": 70\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck\",\n            \"value\": 65\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Jessica Lehmann\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000017\",\n    \"subCriteriaPoints\": {\n        \"wraps\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"wraps\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Wraps\",\n                \"value\": 2\n            },\n            \"powers\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"powers\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Powers\",\n                \"value\": 0\n            },\n            \"releases\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"releases\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Releases\",\n                \"value\": 1\n            },\n            \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 1\n            },\n            \"setOfCrosses\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"setOfCrosses\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n                \"value\": 4\n            },\n            \"setOfMultiples\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"setOfMultiples\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n                \"value\": 5\n            },\n            \"pairInteractions\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"pairInteractions\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Pair Interactions\",\n                \"value\": 3\n            },\n            \"setOfDirectionChanges\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"setOfDirectionChanges\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Lena Münger\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000017\",\n    \"subCriteriaPoints\": {\n        \"wraps\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"wraps\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Wraps\",\n                \"value\": 2\n            },\n            \"powers\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"powers\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Powers\",\n                \"value\": 0\n            },\n            \"releases\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"releases\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Releases\",\n                \"value\": 1\n            },\n            \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 1\n            },\n            \"setOfCrosses\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"setOfCrosses\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n                \"value\": 4\n            },\n            \"setOfMultiples\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"setOfMultiples\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n                \"value\": 5\n            },\n            \"pairInteractions\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"pairInteractions\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Pair Interactions\",\n                \"value\": 3\n            },\n            \"setOfDirectionChanges\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"setOfDirectionChanges\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J6\",\n    \"judgeName\": \"Mirjam Schlatter\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000017\",\n    \"subCriteriaPoints\": {\n        \"wraps\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"wraps\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Wraps\",\n                \"value\": 2\n            },\n            \"powers\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"powers\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Powers\",\n                \"value\": 0\n            },\n            \"releases\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"releases\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Releases\",\n                \"value\": 1\n            },\n            \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 3,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 1\n            },\n            \"setOfCrosses\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"setOfCrosses\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n                \"value\": 5\n            },\n            \"setOfMultiples\": {\n                \"step\": 1,\n                \"rangeEnd\": 6,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"setOfMultiples\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n                \"value\": 5\n            },\n            \"pairInteractions\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"pairInteractions\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Pair Interactions\",\n                \"value\": 4\n            },\n            \"setOfDirectionChanges\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"setOfDirectionChanges\",\n                \"subCriteriaWeight\": 333.3333333,\n                \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J7\",\n    \"judgeName\": \"Matthias Zedi\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000016\",\n    \"subCriteriaPoints\": {\n        \"level2\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level2\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Level 2\",\n            \"value\": 20\n        },\n        \"level3\": {\n            \"step\": 1,\n            \"rangeEnd\": 19,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"level3\",\n            \"subCriteriaWeight\": 160,\n            \"subCriteriaDescription\": \"Level 3\",\n            \"value\": 11\n        },\n        \"level4\": {\n            \"step\": 1,\n            \"rangeEnd\": 13,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"level4\",\n            \"subCriteriaWeight\": 230,\n            \"subCriteriaDescription\": \"Level 4\",\n            \"value\": 5\n        },\n        \"level5\": {\n            \"step\": 1,\n            \"rangeEnd\": 29,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"level5\",\n            \"subCriteriaWeight\": 350,\n            \"subCriteriaDescription\": \"Level 5\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J8 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J8\",\n    \"judgeName\": \"Luana Betschart\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000016\",\n    \"subCriteriaPoints\": {\n        \"level2\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level2\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Level 2\",\n            \"value\": 21\n        },\n        \"level3\": {\n            \"step\": 1,\n            \"rangeEnd\": 19,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"level3\",\n            \"subCriteriaWeight\": 160,\n            \"subCriteriaDescription\": \"Level 3\",\n            \"value\": 10\n        },\n        \"level4\": {\n            \"step\": 1,\n            \"rangeEnd\": 13,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"level4\",\n            \"subCriteriaWeight\": 230,\n            \"subCriteriaDescription\": \"Level 4\",\n            \"value\": 5\n        },\n        \"level5\": {\n            \"step\": 1,\n            \"rangeEnd\": 29,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"level5\",\n            \"subCriteriaWeight\": 350,\n            \"subCriteriaDescription\": \"Level 5\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J9 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J9\",\n    \"judgeName\": \"Stefanie Schneider\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000016\",\n    \"subCriteriaPoints\": {\n        \"level2\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"level2\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Level 2\",\n            \"value\": 20\n        },\n        \"level3\": {\n            \"step\": 1,\n            \"rangeEnd\": 19,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"level3\",\n            \"subCriteriaWeight\": 160,\n            \"subCriteriaDescription\": \"Level 3\",\n            \"value\": 11\n        },\n        \"level4\": {\n            \"step\": 1,\n            \"rangeEnd\": 13,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"level4\",\n            \"subCriteriaWeight\": 230,\n            \"subCriteriaDescription\": \"Level 4\",\n            \"value\": 4\n        },\n        \"level5\": {\n            \"step\": 1,\n            \"rangeEnd\": 29,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"level5\",\n            \"subCriteriaWeight\": 350,\n            \"subCriteriaDescription\": \"Level 5\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J10\",\n    \"judgeName\": \"Ramona Schär\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000019\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 0\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 4\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 2\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 6\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J11\",\n    \"judgeName\": \"Rahel Stöckli\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000019\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 0\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 4\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 2\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 6\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Rahel Weber\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000019\",\n    \"subCriteriaPoints\": {\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 0\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 4\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 2\n        },\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 5\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(52.4)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ERSO DD X",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Team SM 2022",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Team SM 2022"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=team-open-erso-freestyle-doubleDutchSingle-Barbamama",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "team-open-erso-freestyle-doubleDutchSingle-Barbamama"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Emma Synak\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000022\",\n    \"subCriteriaPoints\": {\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Bewegung\",\n            \"value\": 50\n        },\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n            \"value\": 45\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 4\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 5\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n            \"value\": 65\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck\",\n            \"value\": 65\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Melanie Peier\",\n     \"criteriaId\": \"11111111-0000-0000-0000-000000000022\",\n    \"subCriteriaPoints\": {\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Bewegung\",\n            \"value\": 45\n        },\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n            \"value\": 50\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 4\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 3\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n            \"value\": 60\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck\",\n            \"value\": 65\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Martin Angst\",\n     \"criteriaId\": \"11111111-0000-0000-0000-000000000022\",\n    \"subCriteriaPoints\": {\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Bewegung\",\n            \"value\": 50\n        },\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n            \"value\": 55\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 4\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 3\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n            \"value\": 60\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck\",\n            \"value\": 65\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Jessica Lehmann\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000021\",\n    \"subCriteriaPoints\": {\n             \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 2\n            },\n            \"setOfPowers\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"setOfPowers\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Powers (Vierer-Set)\",\n                \"value\": 1\n            },\n            \"tempowechsel\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"tempowechsel\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Tempowechsel\",\n                \"value\": 3\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Lena Münger\",\n     \"criteriaId\": \"11111111-0000-0000-0000-000000000021\",\n    \"subCriteriaPoints\": {\n             \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 2\n            },\n            \"setOfPowers\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"setOfPowers\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Powers (Vierer-Set)\",\n                \"value\": 1\n            },\n            \"tempowechsel\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"tempowechsel\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Tempowechsel\",\n                \"value\": 3\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J6\",\n    \"judgeName\": \"Mirjam Schlatter\",\n     \"criteriaId\": \"11111111-0000-0000-0000-000000000021\",\n    \"subCriteriaPoints\": {\n             \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 2\n            },\n            \"setOfPowers\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"setOfPowers\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Powers (Vierer-Set)\",\n                \"value\": 1\n            },\n            \"tempowechsel\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"tempowechsel\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Tempowechsel\",\n                \"value\": 3\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J7\",\n    \"judgeName\": \"Matthias Zedi\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000020\",\n    \"subCriteriaPoints\": {\n            \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 12\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 63,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 9\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 39,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 2\n            },\n            \"level5\": {\n                \"step\": 1,\n                \"rangeEnd\": 29,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"level5\",\n                \"subCriteriaWeight\": 350,\n                \"subCriteriaDescription\": \"Level 5\",\n                \"value\": 1\n            },\n            \"level6\": {\n                \"step\": 1,\n                \"rangeEnd\": 21,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"level6\",\n                \"subCriteriaWeight\": 490,\n                \"subCriteriaDescription\": \"Level 6\",\n                \"value\": 2\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J8 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J8\",\n    \"judgeName\": \"Luana Betschart\",\n     \"criteriaId\": \"11111111-0000-0000-0000-000000000020\",\n    \"subCriteriaPoints\": {\n            \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 13\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 63,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 9\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 39,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 2\n            },\n            \"level5\": {\n                \"step\": 1,\n                \"rangeEnd\": 29,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"level5\",\n                \"subCriteriaWeight\": 350,\n                \"subCriteriaDescription\": \"Level 5\",\n                \"value\": 1\n            },\n            \"level6\": {\n                \"step\": 1,\n                \"rangeEnd\": 21,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"level6\",\n                \"subCriteriaWeight\": 490,\n                \"subCriteriaDescription\": \"Level 6\",\n                \"value\": 2\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J10\",\n    \"judgeName\": \"Ramona Schär\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000023\",\n    \"subCriteriaPoints\": {\n            \"majorMistakes\": {\n                \"step\": 1,\n                \"rangeEnd\": 50,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"majorMistakes\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Grosse Fehler\",\n                \"value\": 1\n            },\n            \"minorMistakes\": {\n                \"step\": 1,\n                \"rangeEnd\": 50,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"minorMistakes\",\n                \"subCriteriaWeight\": -50,\n                \"subCriteriaDescription\": \"Kleine Fehler\",\n                \"value\": 3\n            },\n            \"timeViolation\": {\n                \"step\": 1,\n                \"rangeEnd\": 1,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"timeViolation\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Zeitüberschreitung\",\n                \"value\": 1\n            },\n            \"spaceViolations\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"spaceViolations\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n                \"value\": 0\n            },\n            \"formAndExecution\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"formAndExecution\",\n                \"subCriteriaWeight\": -21,\n                \"subCriteriaDescription\": \"Ausführung\",\n                \"value\": 10\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J11\",\n    \"judgeName\": \"Rahel Stöckli\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000023\",\n    \"subCriteriaPoints\": {\n            \"majorMistakes\": {\n                \"step\": 1,\n                \"rangeEnd\": 50,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"majorMistakes\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Grosse Fehler\",\n                \"value\": 1\n            },\n            \"minorMistakes\": {\n                \"step\": 1,\n                \"rangeEnd\": 50,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"minorMistakes\",\n                \"subCriteriaWeight\": -50,\n                \"subCriteriaDescription\": \"Kleine Fehler\",\n                \"value\": 3\n            },\n            \"timeViolation\": {\n                \"step\": 1,\n                \"rangeEnd\": 1,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"timeViolation\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Zeitüberschreitung\",\n                \"value\": 1\n            },\n            \"spaceViolations\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"spaceViolations\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n                \"value\": 0\n            },\n            \"formAndExecution\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"formAndExecution\",\n                \"subCriteriaWeight\": -21,\n                \"subCriteriaDescription\": \"Ausführung\",\n                \"value\": 10\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Rahel Weber\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000023\",\n    \"subCriteriaPoints\": {\n            \"majorMistakes\": {\n                \"step\": 1,\n                \"rangeEnd\": 50,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"majorMistakes\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Grosse Fehler\",\n                \"value\": 1\n            },\n            \"minorMistakes\": {\n                \"step\": 1,\n                \"rangeEnd\": 50,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"minorMistakes\",\n                \"subCriteriaWeight\": -50,\n                \"subCriteriaDescription\": \"Kleine Fehler\",\n                \"value\": 3\n            },\n            \"timeViolation\": {\n                \"step\": 1,\n                \"rangeEnd\": 1,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"timeViolation\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Zeitüberschreitung\",\n                \"value\": 1\n            },\n            \"spaceViolations\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"spaceViolations\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n                \"value\": 0\n            },\n            \"formAndExecution\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"formAndExecution\",\n                \"subCriteriaWeight\": -21,\n                \"subCriteriaDescription\": \"Ausführung\",\n                \"value\": 11\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(42.4)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ERSO DD Y",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Team SM 2022",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Team SM 2022"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=team-open-erso-freestyle-doubleDutchSingle-Barbapapa",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "team-open-erso-freestyle-doubleDutchSingle-Barbapapa"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Emma Synak\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000022\",\n    \"subCriteriaPoints\": {\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Bewegung\",\n            \"value\": 70\n        },\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n            \"value\": 80\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 12\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 6\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n            \"value\": 75\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck\",\n            \"value\": 80\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Melanie Peier\",\n     \"criteriaId\": \"11111111-0000-0000-0000-000000000022\",\n    \"subCriteriaPoints\": {\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Bewegung\",\n            \"value\": 75\n        },\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n            \"value\": 80\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 12\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 5\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n            \"value\": 75\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck\",\n            \"value\": 80\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Martin Angst\",\n     \"criteriaId\": \"11111111-0000-0000-0000-000000000022\",\n    \"subCriteriaPoints\": {\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Bewegung\",\n            \"value\": 80\n        },\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n            \"value\": 85\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 12\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 6\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n            \"value\": 80\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck\",\n            \"value\": 80\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Jessica Lehmann\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000021\",\n    \"subCriteriaPoints\": {\n             \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 1\n            },\n            \"setOfPowers\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"setOfPowers\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Powers (Vierer-Set)\",\n                \"value\": 2\n            },\n            \"tempowechsel\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"tempowechsel\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Tempowechsel\",\n                \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Lena Münger\",\n     \"criteriaId\": \"11111111-0000-0000-0000-000000000021\",\n    \"subCriteriaPoints\": {\n             \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 1\n            },\n            \"setOfPowers\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"setOfPowers\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Powers (Vierer-Set)\",\n                \"value\": 2\n            },\n            \"tempowechsel\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"tempowechsel\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Tempowechsel\",\n                \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J6\",\n    \"judgeName\": \"Mirjam Schlatter\",\n     \"criteriaId\": \"11111111-0000-0000-0000-000000000021\",\n    \"subCriteriaPoints\": {\n             \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 1\n            },\n            \"setOfPowers\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"setOfPowers\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Powers (Vierer-Set)\",\n                \"value\": 2\n            },\n            \"tempowechsel\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"tempowechsel\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Tempowechsel\",\n                \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J7\",\n    \"judgeName\": \"Matthias Zedi\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000020\",\n    \"subCriteriaPoints\": {\n            \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 15\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 63,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 7\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 39,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 3\n            },\n            \"level5\": {\n                \"step\": 1,\n                \"rangeEnd\": 29,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"level5\",\n                \"subCriteriaWeight\": 350,\n                \"subCriteriaDescription\": \"Level 5\",\n                \"value\": 3\n            },\n            \"level6\": {\n                \"step\": 1,\n                \"rangeEnd\": 21,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"level6\",\n                \"subCriteriaWeight\": 490,\n                \"subCriteriaDescription\": \"Level 6\",\n                \"value\": 1\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J8 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J8\",\n    \"judgeName\": \"Luana Betschart\",\n     \"criteriaId\": \"11111111-0000-0000-0000-000000000020\",\n    \"subCriteriaPoints\": {\n            \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 15\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 63,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 5\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 39,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 3\n            },\n            \"level5\": {\n                \"step\": 1,\n                \"rangeEnd\": 29,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"level5\",\n                \"subCriteriaWeight\": 350,\n                \"subCriteriaDescription\": \"Level 5\",\n                \"value\": 2\n            },\n            \"level6\": {\n                \"step\": 1,\n                \"rangeEnd\": 21,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"level6\",\n                \"subCriteriaWeight\": 490,\n                \"subCriteriaDescription\": \"Level 6\",\n                \"value\": 1\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J10\",\n    \"judgeName\": \"Ramona Schär\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000023\",\n    \"subCriteriaPoints\": {\n            \"majorMistakes\": {\n                \"step\": 1,\n                \"rangeEnd\": 50,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"majorMistakes\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Grosse Fehler\",\n                \"value\": 0\n            },\n            \"minorMistakes\": {\n                \"step\": 1,\n                \"rangeEnd\": 50,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"minorMistakes\",\n                \"subCriteriaWeight\": -50,\n                \"subCriteriaDescription\": \"Kleine Fehler\",\n                \"value\": 3\n            },\n            \"timeViolation\": {\n                \"step\": 1,\n                \"rangeEnd\": 1,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"timeViolation\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Zeitüberschreitung\",\n                \"value\": 0\n            },\n            \"spaceViolations\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"spaceViolations\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n                \"value\": 0\n            },\n            \"formAndExecution\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"formAndExecution\",\n                \"subCriteriaWeight\": -21,\n                \"subCriteriaDescription\": \"Ausführung\",\n                \"value\": 6\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J11\",\n    \"judgeName\": \"Rahel Stöckli\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000023\",\n    \"subCriteriaPoints\": {\n            \"majorMistakes\": {\n                \"step\": 1,\n                \"rangeEnd\": 50,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"majorMistakes\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Grosse Fehler\",\n                \"value\": 0\n            },\n            \"minorMistakes\": {\n                \"step\": 1,\n                \"rangeEnd\": 50,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"minorMistakes\",\n                \"subCriteriaWeight\": -50,\n                \"subCriteriaDescription\": \"Kleine Fehler\",\n                \"value\": 3\n            },\n            \"timeViolation\": {\n                \"step\": 1,\n                \"rangeEnd\": 1,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"timeViolation\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Zeitüberschreitung\",\n                \"value\": 0\n            },\n            \"spaceViolations\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"spaceViolations\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n                \"value\": 0\n            },\n            \"formAndExecution\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"formAndExecution\",\n                \"subCriteriaWeight\": -21,\n                \"subCriteriaDescription\": \"Ausführung\",\n                \"value\": 5\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Rahel Weber\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000023\",\n    \"subCriteriaPoints\": {\n            \"majorMistakes\": {\n                \"step\": 1,\n                \"rangeEnd\": 50,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"majorMistakes\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Grosse Fehler\",\n                \"value\": 0\n            },\n            \"minorMistakes\": {\n                \"step\": 1,\n                \"rangeEnd\": 50,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"minorMistakes\",\n                \"subCriteriaWeight\": -50,\n                \"subCriteriaDescription\": \"Kleine Fehler\",\n                \"value\": 3\n            },\n            \"timeViolation\": {\n                \"step\": 1,\n                \"rangeEnd\": 1,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"timeViolation\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Zeitüberschreitung\",\n                \"value\": 0\n            },\n            \"spaceViolations\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"spaceViolations\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n                \"value\": 0\n            },\n            \"formAndExecution\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"formAndExecution\",\n                \"subCriteriaWeight\": -21,\n                \"subCriteriaDescription\": \"Ausführung\",\n                \"value\": 4\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(53.2)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ERSO DD Z",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Team SM 2022",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Team SM 2022"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=team-open-erso-freestyle-doubleDutchSingle-let's fätz",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "team-open-erso-freestyle-doubleDutchSingle-let's fätz"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Emma Synak\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000022\",\n    \"subCriteriaPoints\": {\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Bewegung\",\n            \"value\": 80\n        },\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n            \"value\": 65\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 11\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 8\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n            \"value\": 70\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck\",\n            \"value\": 75\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Melanie Peier\",\n     \"criteriaId\": \"11111111-0000-0000-0000-000000000022\",\n    \"subCriteriaPoints\": {\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Bewegung\",\n            \"value\": 80\n        },\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n            \"value\": 70\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 11\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 8\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n            \"value\": 70\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck\",\n            \"value\": 80\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Martin Angst\",\n     \"criteriaId\": \"11111111-0000-0000-0000-000000000022\",\n    \"subCriteriaPoints\": {\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Bewegung\",\n            \"value\": 85\n        },\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n            \"value\": 75\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 12\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 8\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n            \"value\": 70\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck\",\n            \"value\": 75\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Jessica Lehmann\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000021\",\n    \"subCriteriaPoints\": {\n             \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 1\n            },\n            \"setOfPowers\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"setOfPowers\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Powers (Vierer-Set)\",\n                \"value\": 1\n            },\n            \"tempowechsel\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"tempowechsel\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Tempowechsel\",\n                \"value\": 3\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Lena Münger\",\n     \"criteriaId\": \"11111111-0000-0000-0000-000000000021\",\n    \"subCriteriaPoints\": {\n             \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 1\n            },\n            \"setOfPowers\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"setOfPowers\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Powers (Vierer-Set)\",\n                \"value\": 1\n            },\n            \"tempowechsel\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"tempowechsel\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Tempowechsel\",\n                \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J6\",\n    \"judgeName\": \"Mirjam Schlatter\",\n     \"criteriaId\": \"11111111-0000-0000-0000-000000000021\",\n    \"subCriteriaPoints\": {\n             \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 1\n            },\n            \"setOfPowers\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"setOfPowers\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Powers (Vierer-Set)\",\n                \"value\": 1\n            },\n            \"tempowechsel\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"tempowechsel\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Tempowechsel\",\n                \"value\": 3\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J7\",\n    \"judgeName\": \"Matthias Zedi\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000020\",\n    \"subCriteriaPoints\": {\n            \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 9\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 63,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 10\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 39,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 4\n            },\n            \"level5\": {\n                \"step\": 1,\n                \"rangeEnd\": 29,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"level5\",\n                \"subCriteriaWeight\": 350,\n                \"subCriteriaDescription\": \"Level 5\",\n                \"value\": 1\n            },\n            \"level6\": {\n                \"step\": 1,\n                \"rangeEnd\": 21,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"level6\",\n                \"subCriteriaWeight\": 490,\n                \"subCriteriaDescription\": \"Level 6\",\n                \"value\": 1\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J8 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J8\",\n    \"judgeName\": \"Luana Betschart\",\n     \"criteriaId\": \"11111111-0000-0000-0000-000000000020\",\n    \"subCriteriaPoints\": {\n            \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 8\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 63,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 11\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 39,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 4\n            },\n            \"level5\": {\n                \"step\": 1,\n                \"rangeEnd\": 29,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"level5\",\n                \"subCriteriaWeight\": 350,\n                \"subCriteriaDescription\": \"Level 5\",\n                \"value\": 1\n            },\n            \"level6\": {\n                \"step\": 1,\n                \"rangeEnd\": 21,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"level6\",\n                \"subCriteriaWeight\": 490,\n                \"subCriteriaDescription\": \"Level 6\",\n                \"value\": 1\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J10\",\n    \"judgeName\": \"Ramona Schär\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000023\",\n    \"subCriteriaPoints\": {\n            \"majorMistakes\": {\n                \"step\": 1,\n                \"rangeEnd\": 50,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"majorMistakes\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Grosse Fehler\",\n                \"value\": 1\n            },\n            \"minorMistakes\": {\n                \"step\": 1,\n                \"rangeEnd\": 50,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"minorMistakes\",\n                \"subCriteriaWeight\": -50,\n                \"subCriteriaDescription\": \"Kleine Fehler\",\n                \"value\": 5\n            },\n            \"timeViolation\": {\n                \"step\": 1,\n                \"rangeEnd\": 1,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"timeViolation\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Zeitüberschreitung\",\n                \"value\": 0\n            },\n            \"spaceViolations\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"spaceViolations\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n                \"value\": 0\n            },\n            \"formAndExecution\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"formAndExecution\",\n                \"subCriteriaWeight\": -21,\n                \"subCriteriaDescription\": \"Ausführung\",\n                \"value\": 7\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J11\",\n    \"judgeName\": \"Rahel Stöckli\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000023\",\n    \"subCriteriaPoints\": {\n            \"majorMistakes\": {\n                \"step\": 1,\n                \"rangeEnd\": 50,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"majorMistakes\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Grosse Fehler\",\n                \"value\": 1\n            },\n            \"minorMistakes\": {\n                \"step\": 1,\n                \"rangeEnd\": 50,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"minorMistakes\",\n                \"subCriteriaWeight\": -50,\n                \"subCriteriaDescription\": \"Kleine Fehler\",\n                \"value\": 5\n            },\n            \"timeViolation\": {\n                \"step\": 1,\n                \"rangeEnd\": 1,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"timeViolation\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Zeitüberschreitung\",\n                \"value\": 0\n            },\n            \"spaceViolations\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"spaceViolations\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n                \"value\": 0\n            },\n            \"formAndExecution\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"formAndExecution\",\n                \"subCriteriaWeight\": -21,\n                \"subCriteriaDescription\": \"Ausführung\",\n                \"value\": 7\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Rahel Weber\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000023\",\n    \"subCriteriaPoints\": {\n            \"majorMistakes\": {\n                \"step\": 1,\n                \"rangeEnd\": 50,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"majorMistakes\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Grosse Fehler\",\n                \"value\": 1\n            },\n            \"minorMistakes\": {\n                \"step\": 1,\n                \"rangeEnd\": 50,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"minorMistakes\",\n                \"subCriteriaWeight\": -50,\n                \"subCriteriaDescription\": \"Kleine Fehler\",\n                \"value\": 6\n            },\n            \"timeViolation\": {\n                \"step\": 1,\n                \"rangeEnd\": 1,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"timeViolation\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Zeitüberschreitung\",\n                \"value\": 0\n            },\n            \"spaceViolations\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"spaceViolations\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n                \"value\": 0\n            },\n            \"formAndExecution\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"formAndExecution\",\n                \"subCriteriaWeight\": -21,\n                \"subCriteriaDescription\": \"Ausführung\",\n                \"value\": 7\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(51.5)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ERSO DD W",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Team SM 2022",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Team SM 2022"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=team-open-erso-freestyle-doubleDutchSingle-Un, dos, tres Dachsen",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "team-open-erso-freestyle-doubleDutchSingle-Un, dos, tres Dachsen"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Emma Synak\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000022\",\n    \"subCriteriaPoints\": {\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Bewegung\",\n            \"value\": 70\n        },\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n            \"value\": 65\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 4\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 5\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n            \"value\": 70\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck\",\n            \"value\": 75\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Melanie Peier\",\n     \"criteriaId\": \"11111111-0000-0000-0000-000000000022\",\n    \"subCriteriaPoints\": {\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Bewegung\",\n            \"value\": 65\n        },\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n            \"value\": 70\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 4\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 5\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n            \"value\": 65\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck\",\n            \"value\": 75\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3 -presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Martin Angst\",\n     \"criteriaId\": \"11111111-0000-0000-0000-000000000022\",\n    \"subCriteriaPoints\": {\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Bewegung\",\n            \"value\": 65\n        },\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n            \"value\": 65\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 4\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": 10,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 7\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n            \"value\": 75\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck\",\n            \"value\": 65\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Jessica Lehmann\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000021\",\n    \"subCriteriaPoints\": {\n             \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 1\n            },\n            \"setOfPowers\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"setOfPowers\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Powers (Vierer-Set)\",\n                \"value\": 2\n            },\n            \"tempowechsel\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"tempowechsel\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Tempowechsel\",\n                \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Lena Münger\",\n     \"criteriaId\": \"11111111-0000-0000-0000-000000000021\",\n    \"subCriteriaPoints\": {\n             \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 1\n            },\n            \"setOfPowers\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"setOfPowers\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Powers (Vierer-Set)\",\n                \"value\": 2\n            },\n            \"tempowechsel\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"tempowechsel\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Tempowechsel\",\n                \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6 -variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J6\",\n    \"judgeName\": \"Mirjam Schlatter\",\n     \"criteriaId\": \"11111111-0000-0000-0000-000000000021\",\n    \"subCriteriaPoints\": {\n             \"gymnastics\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"gymnastics\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Gymnastics\",\n                \"value\": 1\n            },\n            \"setOfPowers\": {\n                \"step\": 1,\n                \"rangeEnd\": 2,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"setOfPowers\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Powers (Vierer-Set)\",\n                \"value\": 2\n            },\n            \"tempowechsel\": {\n                \"step\": 1,\n                \"rangeEnd\": 4,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"tempowechsel\",\n                \"subCriteriaWeight\": 1250,\n                \"subCriteriaDescription\": \"Tempowechsel\",\n                \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J7\",\n    \"judgeName\": \"Matthias Zedi\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000020\",\n    \"subCriteriaPoints\": {\n            \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 8\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 63,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 7\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 39,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 4\n            },\n            \"level5\": {\n                \"step\": 1,\n                \"rangeEnd\": 29,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"level5\",\n                \"subCriteriaWeight\": 350,\n                \"subCriteriaDescription\": \"Level 5\",\n                \"value\": 2\n            },\n            \"level6\": {\n                \"step\": 1,\n                \"rangeEnd\": 21,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"level6\",\n                \"subCriteriaWeight\": 490,\n                \"subCriteriaDescription\": \"Level 6\",\n                \"value\": 0\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J8 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J8\",\n    \"judgeName\": \"Luana Betschart\",\n     \"criteriaId\": \"11111111-0000-0000-0000-000000000020\",\n    \"subCriteriaPoints\": {\n            \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 9\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 63,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 6\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 39,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 4\n            },\n            \"level5\": {\n                \"step\": 1,\n                \"rangeEnd\": 29,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"level5\",\n                \"subCriteriaWeight\": 350,\n                \"subCriteriaDescription\": \"Level 5\",\n                \"value\": 2\n            },\n            \"level6\": {\n                \"step\": 1,\n                \"rangeEnd\": 21,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"level6\",\n                \"subCriteriaWeight\": 490,\n                \"subCriteriaDescription\": \"Level 6\",\n                \"value\": 0\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J10\",\n    \"judgeName\": \"Ramona Schär\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000023\",\n    \"subCriteriaPoints\": {\n            \"majorMistakes\": {\n                \"step\": 1,\n                \"rangeEnd\": 50,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"majorMistakes\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Grosse Fehler\",\n                \"value\": 0\n            },\n            \"minorMistakes\": {\n                \"step\": 1,\n                \"rangeEnd\": 50,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"minorMistakes\",\n                \"subCriteriaWeight\": -50,\n                \"subCriteriaDescription\": \"Kleine Fehler\",\n                \"value\": 5\n            },\n            \"timeViolation\": {\n                \"step\": 1,\n                \"rangeEnd\": 1,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"timeViolation\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Zeitüberschreitung\",\n                \"value\": 0\n            },\n            \"spaceViolations\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"spaceViolations\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n                \"value\": 0\n            },\n            \"formAndExecution\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"formAndExecution\",\n                \"subCriteriaWeight\": -21,\n                \"subCriteriaDescription\": \"Ausführung\",\n                \"value\": 8\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J11\",\n    \"judgeName\": \"Rahel Stöckli\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000023\",\n    \"subCriteriaPoints\": {\n            \"majorMistakes\": {\n                \"step\": 1,\n                \"rangeEnd\": 50,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"majorMistakes\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Grosse Fehler\",\n                \"value\": 0\n            },\n            \"minorMistakes\": {\n                \"step\": 1,\n                \"rangeEnd\": 50,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"minorMistakes\",\n                \"subCriteriaWeight\": -50,\n                \"subCriteriaDescription\": \"Kleine Fehler\",\n                \"value\": 5\n            },\n            \"timeViolation\": {\n                \"step\": 1,\n                \"rangeEnd\": 1,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"timeViolation\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Zeitüberschreitung\",\n                \"value\": 0\n            },\n            \"spaceViolations\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"spaceViolations\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n                \"value\": 0\n            },\n            \"formAndExecution\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"formAndExecution\",\n                \"subCriteriaWeight\": -21,\n                \"subCriteriaDescription\": \"Ausführung\",\n                \"value\": 8\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Rahel Weber\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000023\",\n    \"subCriteriaPoints\": {\n            \"majorMistakes\": {\n                \"step\": 1,\n                \"rangeEnd\": 50,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"majorMistakes\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Grosse Fehler\",\n                \"value\": 0\n            },\n            \"minorMistakes\": {\n                \"step\": 1,\n                \"rangeEnd\": 50,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"minorMistakes\",\n                \"subCriteriaWeight\": -50,\n                \"subCriteriaDescription\": \"Kleine Fehler\",\n                \"value\": 5\n            },\n            \"timeViolation\": {\n                \"step\": 1,\n                \"rangeEnd\": 1,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"timeViolation\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Zeitüberschreitung\",\n                \"value\": 0\n            },\n            \"spaceViolations\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"spaceViolations\",\n                \"subCriteriaWeight\": -100,\n                \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n                \"value\": 0\n            },\n            \"formAndExecution\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"formAndExecution\",\n                \"subCriteriaWeight\": -21,\n                \"subCriteriaDescription\": \"Ausführung\",\n                \"value\": 7\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(43.1)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check Ranks",
			"item": [
				{
					"name": "calculateAllPoints",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "calculateAllCategoryRanks",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/category-ranks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"category-ranks"
							]
						}
					},
					"response": []
				},
				{
					"name": "calculateAllCombinationRanks",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/combination-ranks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"combination-ranks"
							]
						}
					},
					"response": []
				},
				{
					"name": "listCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categories should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    if (jsonData.length) {",
									"    pm.expect(jsonData[0].id).to.exist",
									"        pm.environment.set(\"categoryId\", jsonData[0].id);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "listWeightedCombinations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament athlete should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"combinationId\", jsonData[0].combinationId);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/combinations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"combinations"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllCategoryRankDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryRank should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(Object.keys(jsonData).length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/category-ranks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"category-ranks"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllCombinationRanks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"combinationRank should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(Object.keys(jsonData)).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/combination-ranks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"combination-ranks"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}