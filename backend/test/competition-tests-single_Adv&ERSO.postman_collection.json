{
	"info": {
		"_postman_id": "6686338c-4041-4475-9a8b-8de72b255e1c",
		"name": "competition-tests-single_Adv&ERSO",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9273620"
	},
	"item": [
		{
			"name": "Speed 30s Aü15 M",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-advanced-speed-30sSingleRope-AthleteM",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-advanced-speed-30sSingleRope-AthleteM"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J9\",\n    \"judgeName\": \"Judge9\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 81\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(81)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 30s Aü15 N",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-advanced-speed-30sSingleRope-AthleteN",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-advanced-speed-30sSingleRope-AthleteN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J10\",\n    \"judgeName\": \"Judge10\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 75\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J11\",\n    \"judgeName\": \"Judge11\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 75\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Judge12\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 57\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(75)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 30s Aü15 O",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-advanced-speed-30sSingleRope-AthleteO",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-advanced-speed-30sSingleRope-AthleteO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J13",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J13\",\n    \"judgeName\": \"Judge13\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 79\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J14",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J14\",\n    \"judgeName\": \"Judge14\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 79\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J15",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J15\",\n    \"judgeName\": \"Judge15\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 79\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(79)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 30s Aü15 P",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-advanced-speed-30sSingleRope-AthleteP",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-advanced-speed-30sSingleRope-AthleteP"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J16",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J16\",\n    \"judgeName\": \"Judge16\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 79\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J17",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J17\",\n    \"judgeName\": \"Judge17\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 76\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J18",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J18\",\n    \"judgeName\": \"Judge18\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 80\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(79)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 30s Aü15 Q",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-advanced-speed-30sSingleRope-AthleteQ",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-advanced-speed-30sSingleRope-AthleteQ"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J19",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J19\",\n    \"judgeName\": \"Judge19\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 61\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J20",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J20\",\n    \"judgeName\": \"Judge20\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 62\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J21",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J21\",\n    \"judgeName\": \"Judge21\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 61\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(61)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 120s Aü15 M",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-advanced-speed-120sSingleRope-AthleteM",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-advanced-speed-120sSingleRope-AthleteM"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J22",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J22\",\n    \"judgeName\": \"Judge22\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 275\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J23",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J23\",\n    \"judgeName\": \"Judge23\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 274\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J24",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J24\",\n    \"judgeName\": \"Judge24\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 273\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(274)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 120s Aü15 N",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-advanced-speed-120sSingleRope-AthleteN",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-advanced-speed-120sSingleRope-AthleteN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Judge1\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 243\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Judge2\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 240\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Judge3\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 246\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(243)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 120s Aü15 O",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-advanced-speed-120sSingleRope-AthleteO",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-advanced-speed-120sSingleRope-AthleteO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Judge4\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 240\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Judge5\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 246\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"Judge6\",\n    \"judgeName\": \"Judge6\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 239\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(240)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 120s Aü15 P",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-advanced-speed-120sSingleRope-AthleteP",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-advanced-speed-120sSingleRope-AthleteP"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J7\",\n    \"judgeName\": \"Judge7\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 253\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J8\",\n    \"judgeName\": \"Judge8\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 255\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J9\",\n    \"judgeName\": \"Judge9\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 254\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(254)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 120s Aü15 Q",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-advanced-speed-120sSingleRope-AthleteQ",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-advanced-speed-120sSingleRope-AthleteQ"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J10\",\n    \"judgeName\": \"Judge10\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 240\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J11\",\n    \"judgeName\": \"Judge11\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 246\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Judge12\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 234\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(0)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Freestyle Aü15 M",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-advanced-freestyle-singleRope-AthleteM",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-advanced-freestyle-singleRope-AthleteM"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J13 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J13\",\n    \"judgeName\": \"Judge13\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000006\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 2\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 4\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 1\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 3\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 2\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 2\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J14 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J14\",\n    \"judgeName\": \"Judge14\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000006\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 2\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 4\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 1\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 3\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 2\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 2\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J15 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J15\",\n    \"judgeName\": \"Judge15\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000006\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 2\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 4\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 1\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 3\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 2\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 2\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J16 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J16\",\n    \"judgeName\": \"Judge16\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000007\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 80\n            },\n            \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 83.33333333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n                \"value\": 11\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 4\n            },\n            \"movement\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"movement\",\n                \"subCriteriaWeight\": 8.333333333,\n                \"subCriteriaDescription\": \"Bewegung\",\n                \"value\": 90\n            },\n            \"movementAcrossFloor\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"movementAcrossFloor\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n                \"value\": 5\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 90\n            },\n            \"overallImpression\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"overallImpression\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Gesamteindruck\",\n                \"value\": 85\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J17 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J17\",\n    \"judgeName\": \"Judge17\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000007\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 80\n            },\n            \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 83.33333333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n                \"value\": 11\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 4\n            },\n            \"movement\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"movement\",\n                \"subCriteriaWeight\": 8.333333333,\n                \"subCriteriaDescription\": \"Bewegung\",\n                \"value\": 90\n            },\n            \"movementAcrossFloor\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"movementAcrossFloor\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n                \"value\": 5\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 90\n            },\n            \"overallImpression\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"overallImpression\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Gesamteindruck\",\n                \"value\": 80\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J18 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J18\",\n    \"judgeName\": \"Judge18\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000007\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 80\n            },\n            \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 83.33333333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n                \"value\": 11\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 4\n            },\n            \"movement\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"movement\",\n                \"subCriteriaWeight\": 8.333333333,\n                \"subCriteriaDescription\": \"Bewegung\",\n                \"value\": 85\n            },\n            \"movementAcrossFloor\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"movementAcrossFloor\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n                \"value\": 5\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 90\n            },\n            \"overallImpression\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"overallImpression\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Gesamteindruck\",\n                \"value\": 85\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J19 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J19\",\n    \"judgeName\": \"Judge19\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000005\",\n    \"subCriteriaPoints\": {\n        \"level1\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"level1\",\n                \"subCriteriaWeight\": 50,\n                \"subCriteriaDescription\": \"Level 1\",\n                \"value\": 15\n            },\n            \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 26,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 20\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 5\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 1\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J20 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J20\",\n    \"judgeName\": \"Judge20\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000005\",\n    \"subCriteriaPoints\": {\n        \"level1\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"level1\",\n                \"subCriteriaWeight\": 50,\n                \"subCriteriaDescription\": \"Level 1\",\n                \"value\": 15\n            },\n            \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 26,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 20\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 5\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 1\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J21 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J21\",\n    \"judgeName\": \"Judge21\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000005\",\n    \"subCriteriaPoints\": {\n        \"level1\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"level1\",\n                \"subCriteriaWeight\": 50,\n                \"subCriteriaDescription\": \"Level 1\",\n                \"value\": 15\n            },\n            \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 26,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 20\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 5\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 1\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J22 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J22\",\n    \"judgeName\": \"Judge22\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000008\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 5\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 3\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 0\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J23 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J23\",\n    \"judgeName\": \"Judge23\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000008\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 5\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 3\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 0\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J24 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J24\",\n    \"judgeName\": \"Judge24\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000008\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 5\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 3\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 0\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(50.8)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Freestyle Aü15 N",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-advanced-freestyle-singleRope-AthleteN",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-advanced-freestyle-singleRope-AthleteN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J13 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J13\",\n    \"judgeName\": \"Judge13\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000006\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 1\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 3\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 1\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 3\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 3\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 2\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J14 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J14\",\n    \"judgeName\": \"Judge14\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000006\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 1\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 3\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 1\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 3\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 3\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 2\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J15 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J15\",\n    \"judgeName\": \"Judge15\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000006\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 1\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 3\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 1\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 3\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 3\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 1\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J16 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J16\",\n    \"judgeName\": \"Judge16\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000007\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 55\n            },\n            \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 83.33333333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n                \"value\": 6\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 2\n            },\n            \"movement\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"movement\",\n                \"subCriteriaWeight\": 8.333333333,\n                \"subCriteriaDescription\": \"Bewegung\",\n                \"value\": 30\n            },\n            \"movementAcrossFloor\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"movementAcrossFloor\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n                \"value\": 3\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 20\n            },\n            \"overallImpression\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"overallImpression\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Gesamteindruck\",\n                \"value\": 20\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J17 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J17\",\n    \"judgeName\": \"Judge17\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000007\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 50\n            },\n            \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 83.33333333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n                \"value\": 10\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 1\n            },\n            \"movement\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"movement\",\n                \"subCriteriaWeight\": 8.333333333,\n                \"subCriteriaDescription\": \"Bewegung\",\n                \"value\": 35\n            },\n            \"movementAcrossFloor\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"movementAcrossFloor\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n                \"value\": 3\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 25\n            },\n            \"overallImpression\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"overallImpression\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Gesamteindruck\",\n                \"value\": 20\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J18 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J18\",\n    \"judgeName\": \"Judge18\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000007\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 45\n            },\n            \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 83.33333333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n                \"value\": 5\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 2\n            },\n            \"movement\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"movement\",\n                \"subCriteriaWeight\": 8.333333333,\n                \"subCriteriaDescription\": \"Bewegung\",\n                \"value\": 40\n            },\n            \"movementAcrossFloor\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"movementAcrossFloor\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n                \"value\": 3\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 25\n            },\n            \"overallImpression\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"overallImpression\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Gesamteindruck\",\n                \"value\": 30\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J19 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J19\",\n    \"judgeName\": \"Judge19\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000005\",\n    \"subCriteriaPoints\": {\n        \"level1\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"level1\",\n                \"subCriteriaWeight\": 50,\n                \"subCriteriaDescription\": \"Level 1\",\n                \"value\": 15\n            },\n            \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 26,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 9\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 4\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 1\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J20 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J20\",\n    \"judgeName\": \"Judge20\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000005\",\n    \"subCriteriaPoints\": {\n        \"level1\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"level1\",\n                \"subCriteriaWeight\": 50,\n                \"subCriteriaDescription\": \"Level 1\",\n                \"value\": 13\n            },\n            \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 26,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 9\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 4\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 1\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J21 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J21\",\n    \"judgeName\": \"Judge21\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000005\",\n    \"subCriteriaPoints\": {\n        \"level1\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"level1\",\n                \"subCriteriaWeight\": 50,\n                \"subCriteriaDescription\": \"Level 1\",\n                \"value\": 13\n            },\n            \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 26,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 10\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 3\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 1\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J22 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J22\",\n    \"judgeName\": \"Judge22\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000008\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 20\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 10\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 3\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J23 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J23\",\n    \"judgeName\": \"Judge23\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000008\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 23\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 11\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 3\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J24 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J24\",\n    \"judgeName\": \"Judge24\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000008\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 25\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 10\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 3\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(20.2)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Freestyle Aü15 O",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-advanced-freestyle-singleRope-AthleteO",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-advanced-freestyle-singleRope-AthleteO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J13 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J13\",\n    \"judgeName\": \"Judge13\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000006\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 5\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 2\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 2\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 1\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 1\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 3\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J14 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J14\",\n    \"judgeName\": \"Judge14\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000006\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 5\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 2\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 2\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 1\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 1\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 3\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J15 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J15\",\n    \"judgeName\": \"Judge15\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000006\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 5\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 2\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 2\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 1\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 1\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 3\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J16 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J16\",\n    \"judgeName\": \"Judge16\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000007\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 75\n            },\n            \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 83.33333333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n                \"value\": 6\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 3\n            },\n            \"movement\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"movement\",\n                \"subCriteriaWeight\": 8.333333333,\n                \"subCriteriaDescription\": \"Bewegung\",\n                \"value\": 60\n            },\n            \"movementAcrossFloor\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"movementAcrossFloor\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n                \"value\": 4\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 45\n            },\n            \"overallImpression\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"overallImpression\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Gesamteindruck\",\n                \"value\": 50\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J17 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J17\",\n    \"judgeName\": \"Judge17\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000007\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 70\n            },\n            \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 83.33333333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n                \"value\": 7\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 5\n            },\n            \"movement\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"movement\",\n                \"subCriteriaWeight\": 8.333333333,\n                \"subCriteriaDescription\": \"Bewegung\",\n                \"value\": 50\n            },\n            \"movementAcrossFloor\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"movementAcrossFloor\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n                \"value\": 4\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 50\n            },\n            \"overallImpression\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"overallImpression\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Gesamteindruck\",\n                \"value\": 55\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J18 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J18\",\n    \"judgeName\": \"Judge18\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000007\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 75\n            },\n            \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 83.33333333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n                \"value\": 8\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 3\n            },\n            \"movement\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"movement\",\n                \"subCriteriaWeight\": 8.333333333,\n                \"subCriteriaDescription\": \"Bewegung\",\n                \"value\": 65\n            },\n            \"movementAcrossFloor\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"movementAcrossFloor\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n                \"value\": 4\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 60\n            },\n            \"overallImpression\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"overallImpression\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Gesamteindruck\",\n                \"value\": 60\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J19 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J19\",\n    \"judgeName\": \"Judge19\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000005\",\n    \"subCriteriaPoints\": {\n        \"level1\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"level1\",\n                \"subCriteriaWeight\": 50,\n                \"subCriteriaDescription\": \"Level 1\",\n                \"value\": 14\n            },\n            \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 26,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 22\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 10\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 0\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J20 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J20\",\n    \"judgeName\": \"Judge20\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000005\",\n    \"subCriteriaPoints\": {\n        \"level1\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"level1\",\n                \"subCriteriaWeight\": 50,\n                \"subCriteriaDescription\": \"Level 1\",\n                \"value\": 13\n            },\n            \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 26,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 20\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 10\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 0\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J21 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J21\",\n    \"judgeName\": \"Judge21\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000005\",\n    \"subCriteriaPoints\": {\n        \"level1\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"level1\",\n                \"subCriteriaWeight\": 50,\n                \"subCriteriaDescription\": \"Level 1\",\n                \"value\": 14\n            },\n            \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 26,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 21\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 10\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 0\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J22 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J22\",\n    \"judgeName\": \"Judge22\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000008\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 20\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 7\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 2\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J23 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J23\",\n    \"judgeName\": \"Judge23\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000008\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 20\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 7\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 2\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J24 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J24\",\n    \"judgeName\": \"Judge24\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000008\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 18\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 7\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 2\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(41.4)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Freestyle Aü15 P",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-advanced-freestyle-singleRope-AthleteP",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-advanced-freestyle-singleRope-AthleteP"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J13 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J13\",\n    \"judgeName\": \"Judge13\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000006\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 5\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 1\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 2\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 2\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 2\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 1\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J14 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J14\",\n    \"judgeName\": \"Judge14\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000006\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 5\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 1\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 1\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 2\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 2\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 1\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J15 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J15\",\n    \"judgeName\": \"Judge15\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000006\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 6\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 1\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 2\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 2\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 2\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 1\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J16 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J16\",\n    \"judgeName\": \"Judge16\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000007\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 70\n            },\n            \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 83.33333333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n                \"value\": 13\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 2\n            },\n            \"movement\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"movement\",\n                \"subCriteriaWeight\": 8.333333333,\n                \"subCriteriaDescription\": \"Bewegung\",\n                \"value\": 70\n            },\n            \"movementAcrossFloor\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"movementAcrossFloor\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n                \"value\": 5\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 50\n            },\n            \"overallImpression\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"overallImpression\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Gesamteindruck\",\n                \"value\": 60\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J17 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J17\",\n    \"judgeName\": \"Judge17\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000007\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 75\n            },\n            \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 83.33333333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n                \"value\": 10\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 2\n            },\n            \"movement\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"movement\",\n                \"subCriteriaWeight\": 8.333333333,\n                \"subCriteriaDescription\": \"Bewegung\",\n                \"value\": 75\n            },\n            \"movementAcrossFloor\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"movementAcrossFloor\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n                \"value\": 5\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 55\n            },\n            \"overallImpression\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"overallImpression\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Gesamteindruck\",\n                \"value\": 60\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J18 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J18\",\n    \"judgeName\": \"Judge18\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000007\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 80\n            },\n            \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 83.33333333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n                \"value\": 11\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 2\n            },\n            \"movement\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"movement\",\n                \"subCriteriaWeight\": 8.333333333,\n                \"subCriteriaDescription\": \"Bewegung\",\n                \"value\": 70\n            },\n            \"movementAcrossFloor\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"movementAcrossFloor\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n                \"value\": 5\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 55\n            },\n            \"overallImpression\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"overallImpression\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Gesamteindruck\",\n                \"value\": 55\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J19 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J19\",\n    \"judgeName\": \"Judge19\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000005\",\n    \"subCriteriaPoints\": {\n        \"level1\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"level1\",\n                \"subCriteriaWeight\": 50,\n                \"subCriteriaDescription\": \"Level 1\",\n                \"value\": 11\n            },\n            \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 26,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 11\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 6\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 2\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J20 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J20\",\n    \"judgeName\": \"Judge20\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000005\",\n    \"subCriteriaPoints\": {\n        \"level1\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"level1\",\n                \"subCriteriaWeight\": 50,\n                \"subCriteriaDescription\": \"Level 1\",\n                \"value\": 11\n            },\n            \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 26,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 11\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 7\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 1\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J21 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J21\",\n    \"judgeName\": \"Judge21\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000005\",\n    \"subCriteriaPoints\": {\n        \"level1\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"level1\",\n                \"subCriteriaWeight\": 50,\n                \"subCriteriaDescription\": \"Level 1\",\n                \"value\": 11\n            },\n            \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 26,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 11\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 6\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 2\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J22 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J22\",\n    \"judgeName\": \"Judge22\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000008\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 8\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 1\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 1\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J23 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J23\",\n    \"judgeName\": \"Judge23\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000008\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 8\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 1\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 1\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J24 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J24\",\n    \"judgeName\": \"Judge24\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000008\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 8\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 1\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 1\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(40.9)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Freestyle Aü15 Q",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-ü15-advanced-freestyle-singleRope-AthleteQ",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-ü15-advanced-freestyle-singleRope-AthleteQ"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J13 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J13\",\n    \"judgeName\": \"Judge13\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000006\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 2\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 1\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 1\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 2\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 1\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 2\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J14 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J14\",\n    \"judgeName\": \"Judge14\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000006\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 2\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 1\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 1\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 2\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 1\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 2\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J15 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J15\",\n    \"judgeName\": \"Judge15\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000006\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 2\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 1\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 1\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 2\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 1\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 2\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J16 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J16\",\n    \"judgeName\": \"Judge16\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000007\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 60\n            },\n            \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 83.33333333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n                \"value\": 1\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 0\n            },\n            \"movement\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"movement\",\n                \"subCriteriaWeight\": 8.333333333,\n                \"subCriteriaDescription\": \"Bewegung\",\n                \"value\": 40\n            },\n            \"movementAcrossFloor\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"movementAcrossFloor\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n                \"value\": 4\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 10\n            },\n            \"overallImpression\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"overallImpression\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Gesamteindruck\",\n                \"value\": 20\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J17 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J17\",\n    \"judgeName\": \"Judge17\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000007\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 60\n            },\n            \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 83.33333333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n                \"value\": 1\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 1\n            },\n            \"movement\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"movement\",\n                \"subCriteriaWeight\": 8.333333333,\n                \"subCriteriaDescription\": \"Bewegung\",\n                \"value\": 35\n            },\n            \"movementAcrossFloor\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"movementAcrossFloor\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n                \"value\": 4\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 10\n            },\n            \"overallImpression\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"overallImpression\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Gesamteindruck\",\n                \"value\": 25\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J18 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J18\",\n    \"judgeName\": \"Judge18\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000007\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"onRhythm\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Im richtigen Rhythmus\",\n                \"value\": 60\n            },\n            \"useOfMusic\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"useOfMusic\",\n                \"subCriteriaWeight\": 83.33333333,\n                \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n                \"value\": 1\n            },\n            \"uniqueSkills\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"uniqueSkills\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n                \"value\": 0\n            },\n            \"movement\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"2\",\n                \"subCriteriaName\": \"movement\",\n                \"subCriteriaWeight\": 8.333333333,\n                \"subCriteriaDescription\": \"Bewegung\",\n                \"value\": 35\n            },\n            \"movementAcrossFloor\": {\n                \"step\": 1,\n                \"rangeEnd\": 5,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"5\",\n                \"subCriteriaName\": \"movementAcrossFloor\",\n                \"subCriteriaWeight\": 166.6666667,\n                \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n                \"value\": 4\n            },\n            \"entertainment\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"entertainment\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Präsentation nach Aussen\",\n                \"value\": 20\n            },\n            \"overallImpression\": {\n                \"step\": 5,\n                \"rangeEnd\": 100,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"9\",\n                \"subCriteriaName\": \"overallImpression\",\n                \"subCriteriaWeight\": 16.66666667,\n                \"subCriteriaDescription\": \"Gesamteindruck\",\n                \"value\": 25\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J19 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J19\",\n    \"judgeName\": \"Judge19\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000005\",\n    \"subCriteriaPoints\": {\n        \"level1\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"level1\",\n                \"subCriteriaWeight\": 50,\n                \"subCriteriaDescription\": \"Level 1\",\n                \"value\": 15\n            },\n            \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 26,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 10\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 0\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 0\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J20 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J20\",\n    \"judgeName\": \"Judge20\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000005\",\n    \"subCriteriaPoints\": {\n        \"level1\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"level1\",\n                \"subCriteriaWeight\": 50,\n                \"subCriteriaDescription\": \"Level 1\",\n                \"value\": 15\n            },\n            \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 26,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 20\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 1\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 0\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J21 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J21\",\n    \"judgeName\": \"Judge21\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000005\",\n    \"subCriteriaPoints\": {\n        \"level1\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"1\",\n                \"subCriteriaName\": \"level1\",\n                \"subCriteriaWeight\": 50,\n                \"subCriteriaDescription\": \"Level 1\",\n                \"value\": 15\n            },\n            \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 26,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 20\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 20,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 0\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 15,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 0\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J22 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J22\",\n    \"judgeName\": \"Judge22\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000008\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 25\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 8\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 2\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J23 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J23\",\n    \"judgeName\": \"Judge23\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000008\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 25\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 8\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 2\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J24 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J24\",\n    \"judgeName\": \"Judge24\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000008\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 27\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 7\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 3\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(19.0)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 30s ERSO Men S",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-men-erso-speed-30sSingleRope-AthleteS",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-men-erso-speed-30sSingleRope-AthleteS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J22",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J22\",\n    \"judgeName\": \"Judge22\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 90\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J23",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J23\",\n    \"judgeName\": \"Judge23\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 90\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J24",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J24\",\n    \"judgeName\": \"Judge24\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 90\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(90)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 30s ERSO Men T",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-men-erso-speed-30sSingleRope-AthleteT",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-men-erso-speed-30sSingleRope-AthleteT"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Judge1\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 79\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Judge2\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 80\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Judge3\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 80\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(80)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 30s ERSO Men U",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-men-erso-speed-30sSingleRope-AthleteU",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-men-erso-speed-30sSingleRope-AthleteU"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Judge4\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 77\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Judge5\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 76\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J6\",\n    \"judgeName\": \"Judge6\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 75\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(76)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 30s ERSO Men V",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-men-erso-speed-30sSingleRope-AthleteV",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-men-erso-speed-30sSingleRope-AthleteV"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J7\",\n    \"judgeName\": \"Judge7\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 75\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J9\",\n    \"judgeName\": \"Judge9\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 75\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(75)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 180s ERSO Men S",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-men-erso-speed-180sSingleRope-AthleteS",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-men-erso-speed-180sSingleRope-AthleteS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J13",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J13\",\n    \"judgeName\": \"Judge13\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 435\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J14",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J14\",\n    \"judgeName\": \"Judge14\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 433\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J15",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J15\",\n    \"judgeName\": \"Judge15\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 434\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(434)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 180s ERSO Men T",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-men-erso-speed-180sSingleRope-AthleteT",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-men-erso-speed-180sSingleRope-AthleteT"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J16",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J16\",\n    \"judgeName\": \"Judge16\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 438\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J17",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J17\",\n    \"judgeName\": \"Judge17\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 438\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J18",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J18\",\n    \"judgeName\": \"Judge18\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 438\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(438)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 180s ERSO Men U",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-men-erso-speed-180sSingleRope-AthleteU",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-men-erso-speed-180sSingleRope-AthleteU"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J19",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J19\",\n    \"judgeName\": \"Judge19\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 428\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J20",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J20\",\n    \"judgeName\": \"Judge20\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 421\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J21",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J21\",\n    \"judgeName\": \"Judge21\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 429\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(429)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 180s ERSO Men V",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-men-erso-speed-180sSingleRope-AthleteV",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-men-erso-speed-180sSingleRope-AthleteV"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J22",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J22\",\n    \"judgeName\": \"Judge22\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 429\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J23",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J23\",\n    \"judgeName\": \"Judge23\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 430\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J24",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J24\",\n    \"judgeName\": \"Judge24\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 431\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(430)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Freestyle ERSO Men S",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-men-erso-freestyle-singleRope-AthleteS",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-men-erso-freestyle-singleRope-AthleteS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Judge1\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000002\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 7\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 5\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 2\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 2\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 3\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 3\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Judge2\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000002\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 7\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 5\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 2\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 2\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 3\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 3\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Judge3\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000002\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 7\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 4\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 2\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 2\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 3\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 3\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Judge4\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000003\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus (%)\",\n            \"value\": 75\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 14\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": \"10\",\n            \"valueType\": \"interger\",\n            \"rangeStart\": \"0\",\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 5\n        },\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 8.333333333,\n            \"subCriteriaDescription\": \"Bewegung (%)\",\n            \"value\": 60\n        },\n        \"movementAcrossFloor\": {\n            \"step\": 1,\n            \"rangeEnd\": 5,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"movementAcrossFloor\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n            \"value\": 5\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen (%)\",\n            \"value\": 85\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck (%)\",\n            \"value\": 85\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Judge5\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000003\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus (%)\",\n            \"value\": 80\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 14\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": \"10\",\n            \"valueType\": \"interger\",\n            \"rangeStart\": \"0\",\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 4\n        },\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 8.333333333,\n            \"subCriteriaDescription\": \"Bewegung (%)\",\n            \"value\": 65\n        },\n        \"movementAcrossFloor\": {\n            \"step\": 1,\n            \"rangeEnd\": 5,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"movementAcrossFloor\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n            \"value\": 5\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen (%)\",\n            \"value\": 85\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck (%)\",\n            \"value\": 85\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J6\",\n    \"judgeName\": \"Judge6\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000003\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus (%)\",\n            \"value\": 75\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 12\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": \"10\",\n            \"valueType\": \"interger\",\n            \"rangeStart\": \"0\",\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 3\n        },\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 8.333333333,\n            \"subCriteriaDescription\": \"Bewegung (%)\",\n            \"value\": 60\n        },\n        \"movementAcrossFloor\": {\n            \"step\": 1,\n            \"rangeEnd\": 5,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"movementAcrossFloor\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n            \"value\": 5\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen (%)\",\n            \"value\": 90\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck (%)\",\n            \"value\": 85\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J7\",\n    \"judgeName\": \"Judge7\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000001\",\n    \"subCriteriaPoints\": {\n           \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 10\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 19,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 15\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 13,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 7\n            },\n            \"level5\": {\n                \"step\": 1,\n                \"rangeEnd\": 29,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"level5\",\n                \"subCriteriaWeight\": 350,\n                \"subCriteriaDescription\": \"Level 5\",\n                \"value\": 3\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J8 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J8\",\n    \"judgeName\": \"Judge8\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000001\",\n    \"subCriteriaPoints\": {\n           \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 10\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 19,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 13\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 13,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 7\n            },\n            \"level5\": {\n                \"step\": 1,\n                \"rangeEnd\": 29,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"level5\",\n                \"subCriteriaWeight\": 350,\n                \"subCriteriaDescription\": \"Level 5\",\n                \"value\": 3\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J9 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J9\",\n    \"judgeName\": \"Judge9\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000001\",\n    \"subCriteriaPoints\": {\n           \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 10\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 19,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 13\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 13,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 7\n            },\n            \"level5\": {\n                \"step\": 1,\n                \"rangeEnd\": 29,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"level5\",\n                \"subCriteriaWeight\": 350,\n                \"subCriteriaDescription\": \"Level 5\",\n                \"value\": 3\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J10\",\n    \"judgeName\": \"Judge10\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000004\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 3\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 2\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 1\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J11\",\n    \"judgeName\": \"Judge11\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000004\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 3\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 2\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 1\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Judge12\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000004\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 2\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 2\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 1\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(64.3)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Freestyle ERSO Men U",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-men-erso-freestyle-singleRope-AthleteU",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-men-erso-freestyle-singleRope-AthleteU"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Judge1\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000002\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 5\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 4\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 2\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 2\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 2\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 2\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Judge2\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000002\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 5\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 4\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 2\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 1\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 2\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 2\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Judge3\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000002\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 6\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 4\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 2\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 2\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 2\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 2\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Judge4\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000003\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus (%)\",\n            \"value\": 80\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 13\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": \"10\",\n            \"valueType\": \"interger\",\n            \"rangeStart\": \"0\",\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 6\n        },\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 8.333333333,\n            \"subCriteriaDescription\": \"Bewegung (%)\",\n            \"value\": 100\n        },\n        \"movementAcrossFloor\": {\n            \"step\": 1,\n            \"rangeEnd\": 5,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"movementAcrossFloor\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n            \"value\": 5\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen (%)\",\n            \"value\": 85\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck (%)\",\n            \"value\": 80\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Judge5\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000003\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus (%)\",\n            \"value\": 70\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 15\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": \"10\",\n            \"valueType\": \"interger\",\n            \"rangeStart\": \"0\",\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 6\n        },\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 8.333333333,\n            \"subCriteriaDescription\": \"Bewegung (%)\",\n            \"value\": 95\n        },\n        \"movementAcrossFloor\": {\n            \"step\": 1,\n            \"rangeEnd\": 5,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"movementAcrossFloor\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n            \"value\": 5\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen (%)\",\n            \"value\": 90\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck (%)\",\n            \"value\": 80\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J6\",\n    \"judgeName\": \"Judge6\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000003\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus (%)\",\n            \"value\": 85\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 16\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": \"10\",\n            \"valueType\": \"interger\",\n            \"rangeStart\": \"0\",\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 6\n        },\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 8.333333333,\n            \"subCriteriaDescription\": \"Bewegung (%)\",\n            \"value\": 95\n        },\n        \"movementAcrossFloor\": {\n            \"step\": 1,\n            \"rangeEnd\": 5,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"movementAcrossFloor\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n            \"value\": 4\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen (%)\",\n            \"value\": 95\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck (%)\",\n            \"value\": 90\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J7\",\n    \"judgeName\": \"Judge7\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000001\",\n    \"subCriteriaPoints\": {\n           \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 10\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 19,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 19\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 13,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 5\n            },\n            \"level5\": {\n                \"step\": 1,\n                \"rangeEnd\": 29,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"level5\",\n                \"subCriteriaWeight\": 350,\n                \"subCriteriaDescription\": \"Level 5\",\n                \"value\": 8\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J8 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J8\",\n    \"judgeName\": \"Judge8\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000001\",\n    \"subCriteriaPoints\": {\n           \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 10\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 19,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 19\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 13,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 5\n            },\n            \"level5\": {\n                \"step\": 1,\n                \"rangeEnd\": 29,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"level5\",\n                \"subCriteriaWeight\": 350,\n                \"subCriteriaDescription\": \"Level 5\",\n                \"value\": 8\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J9 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J9\",\n    \"judgeName\": \"Judge9\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000001\",\n    \"subCriteriaPoints\": {\n           \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 10\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 19,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 19\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 13,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 5\n            },\n            \"level5\": {\n                \"step\": 1,\n                \"rangeEnd\": 29,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"level5\",\n                \"subCriteriaWeight\": 350,\n                \"subCriteriaDescription\": \"Level 5\",\n                \"value\": 8\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J10\",\n    \"judgeName\": \"Judge10\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000004\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 2\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 1\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 0\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J11\",\n    \"judgeName\": \"Judge11\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000004\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 2\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 1\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 0\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Judge12\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000004\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 4\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 1\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 0\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(76.7)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Freestyle ERSO Men V",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-men-erso-freestyle-singleRope-AthleteV",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-men-erso-freestyle-singleRope-AthleteV"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Judge1\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000002\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 3\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 4\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 1\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 2\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 3\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 1\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Judge2\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000002\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 3\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 4\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 1\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 2\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 3\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 1\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Judge3\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000002\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 3\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 4\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 1\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 1\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 3\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 1\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Judge4\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000003\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus (%)\",\n            \"value\": 45\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 3\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": \"10\",\n            \"valueType\": \"interger\",\n            \"rangeStart\": \"0\",\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 1\n        },\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 8.333333333,\n            \"subCriteriaDescription\": \"Bewegung (%)\",\n            \"value\": 40\n        },\n        \"movementAcrossFloor\": {\n            \"step\": 1,\n            \"rangeEnd\": 5,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"movementAcrossFloor\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n            \"value\": 3\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen (%)\",\n            \"value\": 20\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck (%)\",\n            \"value\": 30\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Judge5\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000003\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus (%)\",\n            \"value\": 45\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 2\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": \"10\",\n            \"valueType\": \"interger\",\n            \"rangeStart\": \"0\",\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 1\n        },\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 8.333333333,\n            \"subCriteriaDescription\": \"Bewegung (%)\",\n            \"value\": 35\n        },\n        \"movementAcrossFloor\": {\n            \"step\": 1,\n            \"rangeEnd\": 5,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"movementAcrossFloor\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n            \"value\": 3\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen (%)\",\n            \"value\": 30\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck (%)\",\n            \"value\": 25\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J6\",\n    \"judgeName\": \"Judge6\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000003\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus (%)\",\n            \"value\": 30\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 2\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": \"10\",\n            \"valueType\": \"interger\",\n            \"rangeStart\": \"0\",\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 1\n        },\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 8.333333333,\n            \"subCriteriaDescription\": \"Bewegung (%)\",\n            \"value\": 35\n        },\n        \"movementAcrossFloor\": {\n            \"step\": 1,\n            \"rangeEnd\": 5,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"movementAcrossFloor\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n            \"value\": 3\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen (%)\",\n            \"value\": 35\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck (%)\",\n            \"value\": 30\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J7\",\n    \"judgeName\": \"Judge7\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000001\",\n    \"subCriteriaPoints\": {\n           \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 10\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 19,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 15\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 13,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 3\n            },\n            \"level5\": {\n                \"step\": 1,\n                \"rangeEnd\": 29,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"level5\",\n                \"subCriteriaWeight\": 350,\n                \"subCriteriaDescription\": \"Level 5\",\n                \"value\": 0\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J8 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J8\",\n    \"judgeName\": \"Judge8\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000001\",\n    \"subCriteriaPoints\": {\n           \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 10\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 19,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 14\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 13,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 3\n            },\n            \"level5\": {\n                \"step\": 1,\n                \"rangeEnd\": 29,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"level5\",\n                \"subCriteriaWeight\": 350,\n                \"subCriteriaDescription\": \"Level 5\",\n                \"value\": 0\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J9 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J9\",\n    \"judgeName\": \"Judge9\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000001\",\n    \"subCriteriaPoints\": {\n           \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 10\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 19,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 15\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 13,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 3\n            },\n            \"level5\": {\n                \"step\": 1,\n                \"rangeEnd\": 29,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"level5\",\n                \"subCriteriaWeight\": 350,\n                \"subCriteriaDescription\": \"Level 5\",\n                \"value\": 0\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J10\",\n    \"judgeName\": \"Judge10\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000004\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 20\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 5\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 0\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J11\",\n    \"judgeName\": \"Judge11\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000004\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 21\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 5\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 0\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Judge12\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000004\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 18\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 5\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 0\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 1\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(32.6)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 30s ERSO MenEU X",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-menEU-erso-speed-30sSingleRope-AthleteX",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-menEU-erso-speed-30sSingleRope-AthleteX"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Judge4\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 95\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J11\",\n    \"judgeName\": \"Judge11\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 94\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Judge12\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 95\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(95)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 30s ERSO MenEU Y",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-menEU-erso-speed-30sSingleRope-AthleteY",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-menEU-erso-speed-30sSingleRope-AthleteY"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J13",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J13\",\n    \"judgeName\": \"Judge13\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 77\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J14",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J14\",\n    \"judgeName\": \"Judge14\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 76\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J15",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J15\",\n    \"judgeName\": \"Judge15\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 73\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(76)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 180s ERSO MenEU X",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-menEU-erso-speed-180sSingleRope-AthleteX",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-menEU-erso-speed-180sSingleRope-AthleteX"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Judge1\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 440\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Judge2\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 445\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Judge3\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 447\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(444)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Speed 180s ERSO MenEU Y",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-menEU-erso-speed-180sSingleRope-AthleteY",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-menEU-erso-speed-180sSingleRope-AthleteY"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Judge4\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 421\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Judge5\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 420\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J6\",\n    \"judgeName\": \"Judge6\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000000\",\n    \"subCriteriaPoints\": {\n        \"count\": {\n            \"step\": 1,\n            \"rangeEnd\": 700,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"count\",\n            \"subCriteriaWeight\": 100,\n            \"subCriteriaDescription\": \"Anzahl Sprünge\",\n            \"value\": 421\n        },\n        \"falseStart\": {\n            \"step\": 1,\n            \"rangeEnd\": 4,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"falseStart\",\n            \"subCriteriaWeight\": -500,\n            \"subCriteriaDescription\": \"Frühstart\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(421)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Freestyle ERSO MenEU X",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-menEU-erso-freestyle-singleRope-AthleteX",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-menEU-erso-freestyle-singleRope-AthleteX"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Judge1\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000002\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 8\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 8\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 3\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 3\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 3\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 2\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Judge2\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000002\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 8\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 8\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 3\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 3\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 3\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 2\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J3 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J3\",\n    \"judgeName\": \"Judge3\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000002\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 8\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 8\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 3\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 3\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 3\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 2\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Judge4\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000003\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus (%)\",\n            \"value\": 80\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 17\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": \"10\",\n            \"valueType\": \"interger\",\n            \"rangeStart\": \"0\",\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 7\n        },\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 8.333333333,\n            \"subCriteriaDescription\": \"Bewegung (%)\",\n            \"value\": 75\n        },\n        \"movementAcrossFloor\": {\n            \"step\": 1,\n            \"rangeEnd\": 5,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"movementAcrossFloor\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n            \"value\": 5\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen (%)\",\n            \"value\": 80\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck (%)\",\n            \"value\": 85\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Judge5\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000003\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus (%)\",\n            \"value\": 75\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 15\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": \"10\",\n            \"valueType\": \"interger\",\n            \"rangeStart\": \"0\",\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 7\n        },\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 8.333333333,\n            \"subCriteriaDescription\": \"Bewegung (%)\",\n            \"value\": 75\n        },\n        \"movementAcrossFloor\": {\n            \"step\": 1,\n            \"rangeEnd\": 5,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"movementAcrossFloor\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n            \"value\": 5\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen (%)\",\n            \"value\": 90\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck (%)\",\n            \"value\": 90\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J6 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J6\",\n    \"judgeName\": \"Judge6\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000003\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus (%)\",\n            \"value\": 80\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 14\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": \"10\",\n            \"valueType\": \"interger\",\n            \"rangeStart\": \"0\",\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 7\n        },\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 8.333333333,\n            \"subCriteriaDescription\": \"Bewegung (%)\",\n            \"value\": 75\n        },\n        \"movementAcrossFloor\": {\n            \"step\": 1,\n            \"rangeEnd\": 5,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"movementAcrossFloor\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n            \"value\": 5\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen (%)\",\n            \"value\": 90\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck (%)\",\n            \"value\": 95\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J7\",\n    \"judgeName\": \"Judge7\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000001\",\n    \"subCriteriaPoints\": {\n           \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 6\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 19,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 10\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 13,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 13\n            },\n            \"level5\": {\n                \"step\": 1,\n                \"rangeEnd\": 29,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"level5\",\n                \"subCriteriaWeight\": 350,\n                \"subCriteriaDescription\": \"Level 5\",\n                \"value\": 10\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J8 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J8\",\n    \"judgeName\": \"Judge8\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000001\",\n    \"subCriteriaPoints\": {\n           \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 6\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 19,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 10\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 13,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 13\n            },\n            \"level5\": {\n                \"step\": 1,\n                \"rangeEnd\": 29,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"level5\",\n                \"subCriteriaWeight\": 350,\n                \"subCriteriaDescription\": \"Level 5\",\n                \"value\": 11\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J9 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J9\",\n    \"judgeName\": \"Judge9\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000001\",\n    \"subCriteriaPoints\": {\n           \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 6\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 19,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 11\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 13,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 13\n            },\n            \"level5\": {\n                \"step\": 1,\n                \"rangeEnd\": 29,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"level5\",\n                \"subCriteriaWeight\": 350,\n                \"subCriteriaDescription\": \"Level 5\",\n                \"value\": 12\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J10\",\n    \"judgeName\": \"Judge10\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000004\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 10\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 3\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 1\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J11\",\n    \"judgeName\": \"Judge11\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000004\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 11\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 3\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 1\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J12 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J12\",\n    \"judgeName\": \"Judge12\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000004\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 12\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 3\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 1\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 0\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(85)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Freestyle ERSO MenEU Y",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament plan should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"plan"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPerformanceByPerformanceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"performanceId\", jsonData.id);",
									"    pm.expect(jsonData.categoryId).to.exist",
									"    pm.environment.set(\"categoryId\", jsonData.categoryId);",
									"    if (jsonData.judges && jsonData.judges.length) {",
									"        pm.environment.set(\"judgeId\", jsonData.judges[0].judgeId);",
									"        pm.environment.set(\"judgeName\", jsonData.judges[0].judgeName);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances?performanceName=single-menEU-erso-freestyle-singleRope-AthleteY",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances"
							],
							"query": [
								{
									"key": "performanceName",
									"value": "single-menEU-erso-freestyle-singleRope-AthleteY"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCriteriaByCategoryId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"performance should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/criteria?categoryId={{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"criteria"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "{{categoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePointsforPerformance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code should be correct\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(204)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments/{{tournamentId}}/performances/{{performanceId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments",
								"{{tournamentId}}",
								"performances",
								"{{performanceId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J1 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J1\",\n    \"judgeName\": \"Judge1\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000002\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 5\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 5\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 1\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 0\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 1\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 0\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J2 - variation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J2\",\n    \"judgeName\": \"Judge2\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000002\",\n    \"subCriteriaPoints\": {\n        \"setOfCrosses\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"setOfCrosses\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Crosses (Vierer-Set)\",\n            \"value\": 5\n        },\n        \"setOfMultiples\": {\n            \"step\": 1,\n            \"rangeEnd\": 8,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"setOfMultiples\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Multiples (Vierer-Set)\",\n            \"value\": 5\n        },\n        \"setOfDirectionChanges\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"7\",\n            \"subCriteriaName\": \"setOfDirectionChanges\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Direction Changes (Vierer-Set)\",\n            \"value\": 1\n        },\n        \"gymnastics\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"gymnastics\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Gymnastics\",\n            \"value\": 0\n        },\n        \"powers\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"powers\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Powers\",\n            \"value\": 1\n        },\n        \"releases\": {\n            \"step\": 1,\n            \"rangeEnd\": 3,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"releases\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Releases\",\n            \"value\": 0\n        },\n        \"wraps\": {\n            \"step\": 1,\n            \"rangeEnd\": 2,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"wraps\",\n            \"subCriteriaWeight\": 333.3333333,\n            \"subCriteriaDescription\": \"Wraps\",\n            \"value\": 2\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J4 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J4\",\n    \"judgeName\": \"Judge4\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000003\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus (%)\",\n            \"value\": 50\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 8\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": \"10\",\n            \"valueType\": \"interger\",\n            \"rangeStart\": \"0\",\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 3\n        },\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 8.333333333,\n            \"subCriteriaDescription\": \"Bewegung (%)\",\n            \"value\": 65\n        },\n        \"movementAcrossFloor\": {\n            \"step\": 1,\n            \"rangeEnd\": 5,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"movementAcrossFloor\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n            \"value\": 5\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen (%)\",\n            \"value\": 70\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck (%)\",\n            \"value\": 65\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J5 - presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J5\",\n    \"judgeName\": \"Judge5\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000003\",\n    \"subCriteriaPoints\": {\n        \"onRhythm\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"onRhythm\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Im richtigen Rhythmus (%)\",\n            \"value\": 60\n        },\n        \"useOfMusic\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"useOfMusic\",\n            \"subCriteriaWeight\": 83.33333333,\n            \"subCriteriaDescription\": \"Gebrauch der Musikakzente\",\n            \"value\": 8\n        },\n        \"uniqueSkills\": {\n            \"step\": 1,\n            \"rangeEnd\": \"10\",\n            \"valueType\": \"interger\",\n            \"rangeStart\": \"0\",\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"uniqueSkills\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Originelles und Spektakuläres\",\n            \"value\": 2\n        },\n        \"movement\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"movement\",\n            \"subCriteriaWeight\": 8.333333333,\n            \"subCriteriaDescription\": \"Bewegung (%)\",\n            \"value\": 60\n        },\n        \"movementAcrossFloor\": {\n            \"step\": 1,\n            \"rangeEnd\": 5,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"5\",\n            \"subCriteriaName\": \"movementAcrossFloor\",\n            \"subCriteriaWeight\": 166.6666667,\n            \"subCriteriaDescription\": \"Ausnützung der Wettkampffläche\",\n            \"value\": 5\n        },\n        \"entertainment\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"entertainment\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Präsentation nach Aussen (%)\",\n            \"value\": 70\n        },\n        \"overallImpression\": {\n            \"step\": 5,\n            \"rangeEnd\": 100,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"9\",\n            \"subCriteriaName\": \"overallImpression\",\n            \"subCriteriaWeight\": 16.66666667,\n            \"subCriteriaDescription\": \"Gesamteindruck (%)\",\n            \"value\": 60\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J7 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J7\",\n    \"judgeName\": \"Judge7\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000001\",\n    \"subCriteriaPoints\": {\n           \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 8\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 19,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 16\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 13,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 7\n            },\n            \"level5\": {\n                \"step\": 1,\n                \"rangeEnd\": 29,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"level5\",\n                \"subCriteriaWeight\": 350,\n                \"subCriteriaDescription\": \"Level 5\",\n                \"value\": 1\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J8 - level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J8\",\n    \"judgeName\": \"Judge8\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000001\",\n    \"subCriteriaPoints\": {\n           \"level2\": {\n                \"step\": 1,\n                \"rangeEnd\": 10,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"3\",\n                \"subCriteriaName\": \"level2\",\n                \"subCriteriaWeight\": 100,\n                \"subCriteriaDescription\": \"Level 2\",\n                \"value\": 8\n            },\n            \"level3\": {\n                \"step\": 1,\n                \"rangeEnd\": 19,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"4\",\n                \"subCriteriaName\": \"level3\",\n                \"subCriteriaWeight\": 160,\n                \"subCriteriaDescription\": \"Level 3\",\n                \"value\": 15\n            },\n            \"level4\": {\n                \"step\": 1,\n                \"rangeEnd\": 13,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"6\",\n                \"subCriteriaName\": \"level4\",\n                \"subCriteriaWeight\": 230,\n                \"subCriteriaDescription\": \"Level 4\",\n                \"value\": 7\n            },\n            \"level5\": {\n                \"step\": 1,\n                \"rangeEnd\": 29,\n                \"valueType\": \"integer\",\n                \"rangeStart\": 0,\n                \"uiPosition\": \"7\",\n                \"subCriteriaName\": \"level5\",\n                \"subCriteriaWeight\": 350,\n                \"subCriteriaDescription\": \"Level 5\",\n                \"value\": 2\n            }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J10 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J10\",\n    \"judgeName\": \"Judge10\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000004\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 20\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 0\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 0\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 1\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "addRawPoints J11 - deductions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"rawPoint should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"rawPointId\", jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"performanceId\": \"{{performanceId}}\",\n    \"judgeId\": \"J11\",\n    \"judgeName\": \"Judge11\",\n    \"criteriaId\": \"11111111-0000-0000-0000-000000000004\",\n    \"subCriteriaPoints\": {\n        \"formAndExecution\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"2\",\n            \"subCriteriaName\": \"formAndExecution\",\n            \"subCriteriaWeight\": -8.75,\n            \"subCriteriaDescription\": \"Ausführung\",\n            \"value\": 21\n        },\n        \"minorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"1\",\n            \"subCriteriaName\": \"minorMistakes\",\n            \"subCriteriaWeight\": -50,\n            \"subCriteriaDescription\": \"Kleine Fehler\",\n            \"value\": 0\n        },\n        \"majorMistakes\": {\n            \"step\": 1,\n            \"rangeEnd\": 50,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"4\",\n            \"subCriteriaName\": \"majorMistakes\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Grosse Fehler\",\n            \"value\": 0\n        },\n        \"timeViolation\": {\n            \"step\": 1,\n            \"rangeEnd\": 1,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"6\",\n            \"subCriteriaName\": \"timeViolation\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Zeitüberschreitung\",\n            \"value\": 1\n        },\n        \"spaceViolations\": {\n            \"step\": 1,\n            \"rangeEnd\": 20,\n            \"valueType\": \"integer\",\n            \"rangeStart\": 0,\n            \"uiPosition\": \"3\",\n            \"subCriteriaName\": \"spaceViolations\",\n            \"subCriteriaWeight\": -100,\n            \"subCriteriaDescription\": \"Überschreitung der Wettkampffläche\",\n            \"value\": 0\n        }\n    },\n    \"timestamp\": \"2022-11-09T21:38:07.057+01:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/raw-points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"raw-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryPoint should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"categoryPointId\", jsonData.id)",
									"    pm.expect(jsonData.categoryPoint).to.exist",
									"    pm.expect(jsonData.categoryPoint).to.equal(50.8)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points/{{performanceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points",
								"{{performanceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check Ranks",
			"item": [
				{
					"name": "listTournaments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData[jsonData.length - 1].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTournamentByTournamentName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.id).to.exist",
									"    pm.environment.set(\"tournamentId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tournaments?tournamentName=Test SM Single",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tournaments"
							],
							"query": [
								{
									"key": "tournamentName",
									"value": "Test SM Single"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "calculateAllPoints",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "calculateAllCategoryRanks",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/category-ranks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"category-ranks"
							]
						}
					},
					"response": []
				},
				{
					"name": "calculateAllCombinationRanks",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/combination-ranks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"combination-ranks"
							]
						}
					},
					"response": []
				},
				{
					"name": "listCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categories should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    if (jsonData.length) {",
									"    pm.expect(jsonData[0].id).to.exist",
									"        pm.environment.set(\"categoryId\", jsonData[0].id);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "listWeightedCombinations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tournament athlete should exist\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.length).to.exist",
									"    pm.environment.set(\"combinationId\", jsonData[0].combinationId);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = Math.floor(Math.random() * 900) + 100",
									"pm.environment.set(\"rand\", rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/judging/combinations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"judging",
								"combinations"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllCategoryRankDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"categoryRank should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(Object.keys(jsonData).length).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/category-ranks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"category-ranks"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllCombinationRanks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"combinationRank should be correct\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(Object.keys(jsonData)).to.exist",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/calculations/{{tournamentId}}/combination-ranks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calculations",
								"{{tournamentId}}",
								"combination-ranks"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}